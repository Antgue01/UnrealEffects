
#line   1 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"





#pragma warning(disable:4008)
#line   7 "/Engine/Public/Platform.ush"


#line   7 "/Engine/Public/FP16Math.ush"




















	
	
	
	
	
	
	










#line   9 "/Engine/Public/Platform.ush"












































#line  66 "/Engine/Public/Platform.ush"


#line   3 "/Engine/Public/BindlessResources.ush"



















#line  43 "/Engine/Public/BindlessResources.ush"

	
	
	

	


#line  72 "/Engine/Public/BindlessResources.ush"

	
	
	

	

































#line  68 "/Engine/Public/Platform.ush"

#line   8 "/Engine/Public/OverloadMacros.ush"







	





	





#line  69 "/Engine/Public/Platform.ush"





#line   7 "/Engine/Public/ShaderVersion.ush"
#line  74 "/Engine/Public/Platform.ush"


























































































































































































	





























	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	














#line 397 "/Engine/Public/Platform.ush"

	














































	
	
	
	
	





































	



	
	
	
	
	



	







#line 520 "/Engine/Public/Platform.ush"




































































void ShaderYield()
{
	
}




























#line 638 "/Engine/Public/Platform.ush"



















































































































































































	

	void WriteDispatchIndirectArgs(RWBuffer<uint> RWIndirectDispatchArgsBuffer, in uint InIndex, in uint InIndirectArgX, in uint InIndirectArgY, in uint InIndirectArgZ)
	{
		RWIndirectDispatchArgsBuffer[3 * InIndex + 0] = InIndirectArgX;
		RWIndirectDispatchArgsBuffer[3 * InIndex + 1] = InIndirectArgY;
		RWIndirectDispatchArgsBuffer[3 * InIndex + 2] = InIndirectArgZ;
	}


void WriteDispatchIndirectArgs(RWBuffer<uint> RWIndirectDispatchArgsBuffer, in uint InIndex, in uint3 InIndirectArg)
{
	WriteDispatchIndirectArgs(RWIndirectDispatchArgsBuffer, InIndex, InIndirectArg.x, InIndirectArg.y, InIndirectArg.z);
}





























float min3(float a, float b, float c)
{
	return min(a, min(b, c));
}

int min3(int a, int b, int c)
{
	return min(a, min(b, c));
}

uint min3(uint a, uint b, uint c)
{
	return min(a, min(b, c));
}

  float2 min3 ( float2 a, float2 b, float2 c) { return float2( min3 (a.x , b.x , c.x ), min3 (a.y , b.y , c.y )); } float3 min3 ( float3 a, float3 b, float3 c) { return float3( min3 (a.xy, b.xy, c.xy), min3 (a.z , b.z , c.z )); } float4 min3 ( float4 a, float4 b, float4 c) { return float4( min3 (a.xy, b.xy, c.xy), min3 (a.zw, b.zw, c.zw)); }
  int2 min3 ( int2 a, int2 b, int2 c) { return int2( min3 (a.x , b.x , c.x ), min3 (a.y , b.y , c.y )); } int3 min3 ( int3 a, int3 b, int3 c) { return int3( min3 (a.xy, b.xy, c.xy), min3 (a.z , b.z , c.z )); } int4 min3 ( int4 a, int4 b, int4 c) { return int4( min3 (a.xy, b.xy, c.xy), min3 (a.zw, b.zw, c.zw)); }
  uint2 min3 ( uint2 a, uint2 b, uint2 c) { return uint2( min3 (a.x , b.x , c.x ), min3 (a.y , b.y , c.y )); } uint3 min3 ( uint3 a, uint3 b, uint3 c) { return uint3( min3 (a.xy, b.xy, c.xy), min3 (a.z , b.z , c.z )); } uint4 min3 ( uint4 a, uint4 b, uint4 c) { return uint4( min3 (a.xy, b.xy, c.xy), min3 (a.zw, b.zw, c.zw)); }

float max3(float a, float b, float c)
{
	return max(a, max(b, c));
}

int max3(int a, int b, int c)
{
	return max(a, max(b, c));
}

uint max3(uint a, uint b, uint c)
{
	return max(a, max(b, c));
}

  float2 max3 ( float2 a, float2 b, float2 c) { return float2( max3 (a.x , b.x , c.x ), max3 (a.y , b.y , c.y )); } float3 max3 ( float3 a, float3 b, float3 c) { return float3( max3 (a.xy, b.xy, c.xy), max3 (a.z , b.z , c.z )); } float4 max3 ( float4 a, float4 b, float4 c) { return float4( max3 (a.xy, b.xy, c.xy), max3 (a.zw, b.zw, c.zw)); }
  int2 max3 ( int2 a, int2 b, int2 c) { return int2( max3 (a.x , b.x , c.x ), max3 (a.y , b.y , c.y )); } int3 max3 ( int3 a, int3 b, int3 c) { return int3( max3 (a.xy, b.xy, c.xy), max3 (a.z , b.z , c.z )); } int4 max3 ( int4 a, int4 b, int4 c) { return int4( max3 (a.xy, b.xy, c.xy), max3 (a.zw, b.zw, c.zw)); }
  uint2 max3 ( uint2 a, uint2 b, uint2 c) { return uint2( max3 (a.x , b.x , c.x ), max3 (a.y , b.y , c.y )); } uint3 max3 ( uint3 a, uint3 b, uint3 c) { return uint3( max3 (a.xy, b.xy, c.xy), max3 (a.z , b.z , c.z )); } uint4 max3 ( uint4 a, uint4 b, uint4 c) { return uint4( max3 (a.xy, b.xy, c.xy), max3 (a.zw, b.zw, c.zw)); }

#line 938 "/Engine/Public/Platform.ush"








#line 972 "/Engine/Public/Platform.ush"

  bool select_internal(bool    c, bool a, bool b) { return bool (c   ? a.x : b.x); } bool2 select_internal(bool    c, bool a, bool2 b) { return bool2(c   ? a   : b.x, c   ? a   : b.y); } bool2 select_internal(bool    c, bool2 a, bool b) { return bool2(c   ? a.x : b  , c   ? a.y : b  ); } bool2 select_internal(bool    c, bool2 a, bool2 b) { return bool2(c   ? a.x : b.x, c   ? a.y : b.y); } bool2 select_internal(bool2   c, bool a, bool b) { return bool2(c.x ? a   : b  , c.y ? a   : b  ); } bool2 select_internal(bool2   c, bool a, bool2 b) { return bool2(c.x ? a   : b.x, c.y ? a   : b.y); } bool2 select_internal(bool2   c, bool2 a, bool b) { return bool2(c.x ? a.x : b  , c.y ? a.y : b  ); } bool2 select_internal(bool2   c, bool2 a, bool2 b) { return bool2(c.x ? a.x : b.x, c.y ? a.y : b.y); } bool3 select_internal(bool    c, bool a, bool3 b) { return bool3(c   ? a   : b.x, c   ? a   : b.y, c   ? a   : b.z); } bool3 select_internal(bool    c, bool3 a, bool b) { return bool3(c   ? a.x : b  , c   ? a.y : b  , c   ? a.z : b  ); } bool3 select_internal(bool    c, bool3 a, bool3 b) { return bool3(c   ? a.x : b.x, c   ? a.y : b.y, c   ? a.z : b.z); } bool3 select_internal(bool3   c, bool a, bool b) { return bool3(c.x ? a   : b  , c.y ? a   : b  , c.z ? a   : b  ); } bool3 select_internal(bool3   c, bool a, bool3 b) { return bool3(c.x ? a   : b.x, c.y ? a   : b.y, c.z ? a   : b.z); } bool3 select_internal(bool3   c, bool3 a, bool b) { return bool3(c.x ? a.x : b  , c.y ? a.y : b  , c.z ? a.z : b  ); } bool3 select_internal(bool3   c, bool3 a, bool3 b) { return bool3(c.x ? a.x : b.x, c.y ? a.y : b.y, c.z ? a.z : b.z); } bool4 select_internal(bool    c, bool a, bool4 b) { return bool4(c   ? a   : b.x, c   ? a   : b.y, c   ? a   : b.z, c   ? a   : b.w); } bool4 select_internal(bool    c, bool4 a, bool b) { return bool4(c   ? a.x : b  , c   ? a.y : b  , c   ? a.z : b  , c   ? a.w : b  ); } bool4 select_internal(bool    c, bool4 a, bool4 b) { return bool4(c   ? a.x : b.x, c   ? a.y : b.y, c   ? a.z : b.z, c   ? a.w : b.w); } bool4 select_internal(bool4   c, bool a, bool b) { return bool4(c.x ? a   : b  , c.y ? a   : b  , c.z ? a   : b  , c.w ? a   : b  ); } bool4 select_internal(bool4   c, bool a, bool4 b) { return bool4(c.x ? a   : b.x, c.y ? a   : b.y, c.z ? a   : b.z, c.w ? a   : b.w); } bool4 select_internal(bool4   c, bool4 a, bool b) { return bool4(c.x ? a.x : b  , c.y ? a.y : b  , c.z ? a.z : b  , c.w ? a.w : b  ); } bool4 select_internal(bool4   c, bool4 a, bool4 b) { return bool4(c.x ? a.x : b.x, c.y ? a.y : b.y, c.z ? a.z : b.z, c.w ? a.w : b.w); } 




  int select_internal(bool    c, int a, int b) { return int (c   ? a.x : b.x); } int2 select_internal(bool    c, int a, int2 b) { return int2(c   ? a   : b.x, c   ? a   : b.y); } int2 select_internal(bool    c, int2 a, int b) { return int2(c   ? a.x : b  , c   ? a.y : b  ); } int2 select_internal(bool    c, int2 a, int2 b) { return int2(c   ? a.x : b.x, c   ? a.y : b.y); } int2 select_internal(bool2   c, int a, int b) { return int2(c.x ? a   : b  , c.y ? a   : b  ); } int2 select_internal(bool2   c, int a, int2 b) { return int2(c.x ? a   : b.x, c.y ? a   : b.y); } int2 select_internal(bool2   c, int2 a, int b) { return int2(c.x ? a.x : b  , c.y ? a.y : b  ); } int2 select_internal(bool2   c, int2 a, int2 b) { return int2(c.x ? a.x : b.x, c.y ? a.y : b.y); } int3 select_internal(bool    c, int a, int3 b) { return int3(c   ? a   : b.x, c   ? a   : b.y, c   ? a   : b.z); } int3 select_internal(bool    c, int3 a, int b) { return int3(c   ? a.x : b  , c   ? a.y : b  , c   ? a.z : b  ); } int3 select_internal(bool    c, int3 a, int3 b) { return int3(c   ? a.x : b.x, c   ? a.y : b.y, c   ? a.z : b.z); } int3 select_internal(bool3   c, int a, int b) { return int3(c.x ? a   : b  , c.y ? a   : b  , c.z ? a   : b  ); } int3 select_internal(bool3   c, int a, int3 b) { return int3(c.x ? a   : b.x, c.y ? a   : b.y, c.z ? a   : b.z); } int3 select_internal(bool3   c, int3 a, int b) { return int3(c.x ? a.x : b  , c.y ? a.y : b  , c.z ? a.z : b  ); } int3 select_internal(bool3   c, int3 a, int3 b) { return int3(c.x ? a.x : b.x, c.y ? a.y : b.y, c.z ? a.z : b.z); } int4 select_internal(bool    c, int a, int4 b) { return int4(c   ? a   : b.x, c   ? a   : b.y, c   ? a   : b.z, c   ? a   : b.w); } int4 select_internal(bool    c, int4 a, int b) { return int4(c   ? a.x : b  , c   ? a.y : b  , c   ? a.z : b  , c   ? a.w : b  ); } int4 select_internal(bool    c, int4 a, int4 b) { return int4(c   ? a.x : b.x, c   ? a.y : b.y, c   ? a.z : b.z, c   ? a.w : b.w); } int4 select_internal(bool4   c, int a, int b) { return int4(c.x ? a   : b  , c.y ? a   : b  , c.z ? a   : b  , c.w ? a   : b  ); } int4 select_internal(bool4   c, int a, int4 b) { return int4(c.x ? a   : b.x, c.y ? a   : b.y, c.z ? a   : b.z, c.w ? a   : b.w); } int4 select_internal(bool4   c, int4 a, int b) { return int4(c.x ? a.x : b  , c.y ? a.y : b  , c.z ? a.z : b  , c.w ? a.w : b  ); } int4 select_internal(bool4   c, int4 a, int4 b) { return int4(c.x ? a.x : b.x, c.y ? a.y : b.y, c.z ? a.z : b.z, c.w ? a.w : b.w); } 
  float select_internal(bool    c, float a, float b) { return float (c   ? a.x : b.x); } float2 select_internal(bool    c, float a, float2 b) { return float2(c   ? a   : b.x, c   ? a   : b.y); } float2 select_internal(bool    c, float2 a, float b) { return float2(c   ? a.x : b  , c   ? a.y : b  ); } float2 select_internal(bool    c, float2 a, float2 b) { return float2(c   ? a.x : b.x, c   ? a.y : b.y); } float2 select_internal(bool2   c, float a, float b) { return float2(c.x ? a   : b  , c.y ? a   : b  ); } float2 select_internal(bool2   c, float a, float2 b) { return float2(c.x ? a   : b.x, c.y ? a   : b.y); } float2 select_internal(bool2   c, float2 a, float b) { return float2(c.x ? a.x : b  , c.y ? a.y : b  ); } float2 select_internal(bool2   c, float2 a, float2 b) { return float2(c.x ? a.x : b.x, c.y ? a.y : b.y); } float3 select_internal(bool    c, float a, float3 b) { return float3(c   ? a   : b.x, c   ? a   : b.y, c   ? a   : b.z); } float3 select_internal(bool    c, float3 a, float b) { return float3(c   ? a.x : b  , c   ? a.y : b  , c   ? a.z : b  ); } float3 select_internal(bool    c, float3 a, float3 b) { return float3(c   ? a.x : b.x, c   ? a.y : b.y, c   ? a.z : b.z); } float3 select_internal(bool3   c, float a, float b) { return float3(c.x ? a   : b  , c.y ? a   : b  , c.z ? a   : b  ); } float3 select_internal(bool3   c, float a, float3 b) { return float3(c.x ? a   : b.x, c.y ? a   : b.y, c.z ? a   : b.z); } float3 select_internal(bool3   c, float3 a, float b) { return float3(c.x ? a.x : b  , c.y ? a.y : b  , c.z ? a.z : b  ); } float3 select_internal(bool3   c, float3 a, float3 b) { return float3(c.x ? a.x : b.x, c.y ? a.y : b.y, c.z ? a.z : b.z); } float4 select_internal(bool    c, float a, float4 b) { return float4(c   ? a   : b.x, c   ? a   : b.y, c   ? a   : b.z, c   ? a   : b.w); } float4 select_internal(bool    c, float4 a, float b) { return float4(c   ? a.x : b  , c   ? a.y : b  , c   ? a.z : b  , c   ? a.w : b  ); } float4 select_internal(bool    c, float4 a, float4 b) { return float4(c   ? a.x : b.x, c   ? a.y : b.y, c   ? a.z : b.z, c   ? a.w : b.w); } float4 select_internal(bool4   c, float a, float b) { return float4(c.x ? a   : b  , c.y ? a   : b  , c.z ? a   : b  , c.w ? a   : b  ); } float4 select_internal(bool4   c, float a, float4 b) { return float4(c.x ? a   : b.x, c.y ? a   : b.y, c.z ? a   : b.z, c.w ? a   : b.w); } float4 select_internal(bool4   c, float4 a, float b) { return float4(c.x ? a.x : b  , c.y ? a.y : b  , c.z ? a.z : b  , c.w ? a.w : b  ); } float4 select_internal(bool4   c, float4 a, float4 b) { return float4(c.x ? a.x : b.x, c.y ? a.y : b.y, c.z ? a.z : b.z, c.w ? a.w : b.w); } 











bool  and_internal(bool  a, bool  b) { return bool(a && b); }
bool2 and_internal(bool2 a, bool2 b) { return bool2(a.x && b.x, a.y && b.y); }
bool3 and_internal(bool3 a, bool3 b) { return bool3(a.x && b.x, a.y && b.y, a.z && b.z); }
bool4 and_internal(bool4 a, bool4 b) { return bool4(a.x && b.x, a.y && b.y, a.z && b.z, a.w && b.w); }

bool  or_internal(bool  a, bool  b) { return bool(a || b); }
bool2 or_internal(bool2 a, bool2 b) { return bool2(a.x || b.x, a.y || b.y); }
bool3 or_internal(bool3 a, bool3 b) { return bool3(a.x || b.x, a.y || b.y, a.z || b.z); }
bool4 or_internal(bool4 a, bool4 b) { return bool4(a.x || b.x, a.y || b.y, a.z || b.z, a.w || b.w); }




#line 1023 "/Engine/Public/Platform.ush"




float  CondMask(bool Cond, float  Src0, float  Src1) { return Cond ? Src0 : Src1; }
float2 CondMask(bool Cond, float2 Src0, float2 Src1) { return Cond ? Src0 : Src1; }
float3 CondMask(bool Cond, float3 Src0, float3 Src1) { return Cond ? Src0 : Src1; }
float4 CondMask(bool Cond, float4 Src0, float4 Src1) { return Cond ? Src0 : Src1; }

int  CondMask(bool Cond, int  Src0, int  Src1) { return Cond ? Src0 : Src1; }
int2 CondMask(bool Cond, int2 Src0, int2 Src1) { return Cond ? Src0 : Src1; }
int3 CondMask(bool Cond, int3 Src0, int3 Src1) { return Cond ? Src0 : Src1; }
int4 CondMask(bool Cond, int4 Src0, int4 Src1) { return Cond ? Src0 : Src1; }

uint  CondMask(bool Cond, uint  Src0, uint  Src1) { return Cond ? Src0 : Src1; }
uint2 CondMask(bool Cond, uint2 Src0, uint2 Src1) { return Cond ? Src0 : Src1; }
uint3 CondMask(bool Cond, uint3 Src0, uint3 Src1) { return Cond ? Src0 : Src1; }
uint4 CondMask(bool Cond, uint4 Src0, uint4 Src1) { return Cond ? Src0 : Src1; }




float UnpackByte0(uint v) { return float(v & 0xff); }
float UnpackByte1(uint v) { return float((v >> 8) & 0xff); }
float UnpackByte2(uint v) { return float((v >> 16) & 0xff); }
float UnpackByte3(uint v) { return float(v >> 24); }









uint BitFieldInsertU32(uint Mask, uint Preserve, uint Enable)
{
	return (Preserve & Mask) | (Enable & ~Mask);
}

uint BitFieldExtractU32(uint Data, uint Size, uint Offset)
{
	
	
	Size &= 31;
	Offset &= 31;
	return (Data >> Offset) & ((1u << Size) - 1u);
}

int BitFieldExtractI32(int Data, uint Size, uint Offset)
{
	Size &= 31u;
	Offset &= 31u;
	const uint Shift = (32u - Size) & 31u;
	const int Value = (Data >> Offset) & int((1u << Size) - 1u);
	return (Value << Shift) >> Shift;
}

uint BitFieldMaskU32(uint MaskWidth, uint MaskLocation)
{
	MaskWidth &= 31u;
	MaskLocation &= 31u;

	return ((1u << MaskWidth) - 1u) << MaskLocation;
}





int MulI24(int I1, int I2)
{
	
	return (I1 * I2);
}

uint MulU24(uint U1, uint U2)
{
	
	return U1 * U2;
}

int MadI24(int I1, int I2, int I3)
{
	
	return I1 * I2 + I3;
}

uint MadU24(uint U1, uint U2, uint U3)
{
	
	return U1 * U2 + U3;
}



uint Padding(uint Value, uint Pow2)
{
	return (Value + Pow2 - 1u) & ~(Pow2 - 1u);
}

uint CeilLog2(uint Value)
{
	return Value < 2u ? 0u : firstbithigh(Value - 1u) + 1u;
}

float BitFieldExtractFloat(uint Bits, uint Count, uint Offset)
{
	return BitFieldExtractU32(Bits, Count, Offset) / (float)BitFieldMaskU32(Count, 0u);
}



uint BitAlignU32(uint High, uint Low, uint Shift)
{
	Shift &= 31u;

	uint Result = Low >> Shift;
	Result |= Shift > 0u ? (High << (32u - Shift)) : 0u;
	return Result;
}




uint ByteAlignU32(uint High, uint Low, uint Shift)
{
	return BitAlignU32(High, Low, Shift * 8);
}











uint2 PackUlongType(uint2 Value)
{
	return Value;
}

uint2 UnpackUlongType(uint2 Value)
{
	return Value;
}




uint MaskedBitCount( uint2 Bits, uint Index )
{
	bool bLow = Index < 32;

	uint Mask = 1u << ( Index - ( bLow ? 0 : 32 ) );
	Mask -= 1;

	uint Offset;
	Offset  = countbits( Bits.x & ( bLow ? Mask : ~0u ) );
	Offset += countbits( Bits.y & ( bLow ? 0 : Mask ) );
	return Offset;
}











#line 1231 "/Engine/Public/Platform.ush"




	









	
	







	
		
	






















#line   7 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"


#line   7 "/Plugin/FX/Niagara/Private/NiagaraShaderVersion.ush"
#line   9 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"



	


	







	const static float PI = 3.1415926535897932f;

	const static float TWO_PI = 3.1415926535897932f*2.0f;

#line   7 "/Engine/Private/Definitions.usf"



























































































































































































































































































#line  27 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"



float4 ModuloPrecise(float4 x, float4 y){ return x - y * trunc(x/y); }
float3 ModuloPrecise(float3 x, float3 y){ return x - y * trunc(x/y); }
float2 ModuloPrecise(float2 x, float2 y){ return x - y * trunc(x/y);}
float ModuloPrecise(float x, float y){ return x - y * trunc(x/y); }
int ModuloPrecise(int x, int y){ return x - y * (x/y); }
int Modulo(int x, int y){  return x - y * (x/y);  }

	

float4 Reciprocal(float4 x){ return 1.0f/x;}
float3 Reciprocal(float3 x){ return 1.0f/x; }
float2 Reciprocal(float2 x){ return 1.0f/x;}
float Reciprocal(float x){ return 1.0f/x; }



bool NiagaraAll(bool b) { return b; }
bool NiagaraAny(bool b) { return b; }









bool NiagaraAll(bool2 b) { return b.x && b.y; }
bool NiagaraAll(bool3 b) { return b.x && b.y && b.z; }
bool NiagaraAll(bool4 b) { return b.x && b.y && b.z && b.w; }
bool NiagaraAny(bool2 b) { return b.x || b.y; }
bool NiagaraAny(bool3 b) { return b.x || b.y || b.z; }
bool NiagaraAny(bool4 b) { return b.x || b.y || b.z || b.w; }






#line 205 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"























float4 rand4(int Seed1, int Seed2, int Seed3, int Seed4)
{
	int4 v = int4(Seed4, Seed1, Seed2, Seed3) * 1664525 + 1013904223;

	v.x += v.y*v.w;
	v.y += v.z*v.x;
	v.z += v.x*v.y;
	v.w += v.y*v.z;
	v.x += v.y*v.w;
	v.y += v.z*v.x;
	v.z += v.x*v.y;
	v.w += v.y*v.z;

	
	
	

	
	return float4((v >> 8) & 0x00ffffff) / 16777216.0; 
	
}







float3 rand3(int Seed1, int Seed2, int Seed3, int Seed4)
{
	int3 v = int3(Seed1, Seed2, Seed4 | (Seed3 << 16)) * 1664525 + 1013904223;

	v.x += v.y*v.z;
	v.y += v.z*v.x;
	v.z += v.x*v.y;
	v.x += v.y*v.z;
	v.y += v.z*v.x;
	v.z += v.x*v.y;

	return float3((v >> 8) & 0x00ffffff) / 16777216.0; 
}


static int RandomCounterDeterministic = 0;


float rand(float x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).x * x;
}


float2 rand(float2 x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).xy * x;
}


float3 rand(float3 x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).xyz * x;
}


float4 rand(float4 x, int Seed1, int Seed2, int Seed3) 
{
	RandomCounterDeterministic += 1;
	return rand4(Seed1, Seed2, Seed3, RandomCounterDeterministic).xyzw * x;
}


int rand(int x, int Seed1, int Seed2, int Seed3)
{
	
	
	RandomCounterDeterministic += 1;
	return int(rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).x * (x+1));
}





#line 355 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"

	

	float rand(float x); 

	float2 rand(float2 x)
	{
		return float2(rand(x.x), rand(x.y));
	}

	float3 rand(float3 x)
	{
		return float3(rand(x.x), rand(x.y), rand(x.z));
	}

	float4 rand(float4 x) 
	{
		return float4(rand(x.x), rand(x.y), rand(x.z), rand(x.w));
	}
	
	int rand(int x); 




int hash_single(int a)
{
    int x = (a ^ 61) ^ (a >> 16);
	x += x << 3;
	x ^= x >> 4;
	x *= 0x27d4eb2d;
	x ^= x >> 15;
	return x;
}

int hash(int a, int b)
{
	return hash_single(a) ^ hash_single(b * 31);
}

float hash_float(int a, int b)
{
	return (hash(a, b) & 0x00ffffff) / 16777216.0;
}


float hash_float(float a, int b)
{
	return (hash(a * 16777216.0, b) & 0x00ffffff) / 16777216.0;
}


float rand_float(float x)
{
	return rand(x.x);
}

float2 rand_float(float2 x)
{
	return float2(rand_float(x.x), rand_float(x.y));
}

float3 rand_float(float3 x)
{
	return float3(rand_float(x.x), rand_float(x.y), rand_float(x.z));
}

float4 rand_float(float4 x) 
{
	return float4(rand_float(x.x), rand_float(x.y), rand_float(x.z), rand_float(x.w));
}

int rand_int(int x)
{
	
	
	
	return (int) rand_float(x.x);
}


float rand_float(float x, int Seed1, int Seed2, int Seed3)
{
	return rand(x.x, Seed1, Seed2, Seed3);
}

float2 rand_float(float2 x, int Seed1, int Seed2, int Seed3)
{
	return rand(x, Seed1, Seed2, Seed3);
}

float3 rand_float(float3 x, int Seed1, int Seed2, int Seed3)
{
	return rand(x, Seed1, Seed2, Seed3);
}

float4 rand_float(float4 x, int Seed1, int Seed2, int Seed3) 
{
	return rand(x, Seed1, Seed2, Seed3);
}

int rand_int(int x, int Seed1, int Seed2, int Seed3)
{
	
	
	return rand(x.x-1, Seed1, Seed2, Seed3);
}






	float noise(float x);
	float noise(float2 x);
	float noise(float3 x);

	
	
	float4 Modulo(float4 x, float4 y);
	float3 Modulo(float3 x, float3 y);
	float2 Modulo(float2 x, float2 y);
	float Modulo(float x, float y);

	
	int ExecIndex();

	
	
	int AcquireIndex(int DataSetID, bool DoAcquire);

	void AcquireID(int DataSetID, out int IDIndex, out int IDAcquireTag);
	void UpdateID(int DataSetID, int IDIndex, int InstanceIndex);

	float InputDataFloat(int DataSetIndex, int RegisterIdx);  
	int InputDataInt(int DataSetIndex, int RegisterIdx);
	bool InputDataBool(int DataSetIndex, int RegisterIdx);
	float InputDataHalf(int DataSetIndex, int RegisterIdx);

	float InputDataNoadvanceFloat(int DataSetIndex, int RegisterIdx);  
	int InputDataNoadvanceInt(int DataSetIndex, int RegisterIdx);
	bool InputDataNoadvanceBool(int DataSetIndex, int RegisterIdx);

	void OutputDataFloat(int DataSetIndex, int RegisterIndex, int InstanceIndex, float Value);
	void OutputDataInt(int DataSetIndex, int RegisterIndex, int InstanceIndex, int Value);
	void OutputDataBool(int DataSetIndex, int RegisterIndex, int InstanceIndex, bool Value);
	void OutputDataHalf(int DataSetIndex, int RegisterIndex, int InstanceIndex, float Value);









#line 780 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"


	


	int OutputIndex(const int DataSetID, const bool bStageKillsParticles, const bool bIsValid)
	{
	











		return AcquireIndex(DataSetID, bIsValid);
	}



struct NiagaraRandInfo
{
	int Seed1;
	int Seed2;
	int Seed3;
};

#line 841 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"




#line  22 "/Engine/Generated/NiagaraEmitterInstance.ush"
struct NiagaraID
{
	int Index;
	int AcquireTag;
};

cbuffer FNiagaraGlobalParameters
{
	float Engine_WorldDeltaTime;
	float Engine_DeltaTime;
	float Engine_InverseDeltaTime;
	float Engine_Time;
	float Engine_RealTime;
	int Engine_QualityLevel;
	int Engine_PaddingInt32_0;
	int Engine_PaddingInt32_1;
}

cbuffer FNiagaraSystemParameters
{
	float Engine_Owner_TimeSinceRendered;
	float Engine_Owner_LODDistance;
	float Engine_Owner_LODDistanceFraction;
	float Engine_System_Age;
	int Engine_Owner_ExecutionState;
	int Engine_System_TickCount;
	int Engine_System_NumEmitters;
	int Engine_System_NumEmittersAlive;
	int Engine_System_SignificanceIndex;
	int Engine_System_RandomSeed;
	int Engine_System_CurrentTimeStep;
	int Engine_System_NumTimeSteps;
	float Engine_System_TimeStepFraction;
	int Engine_System_NumParticles;
	int Engine_System_PaddingInt32_0;
	int Engine_System_PaddingInt32_1;
}

cbuffer FNiagaraOwnerParameters
{
	float4x4 Engine_Owner_SystemLocalToWorld;
	float4x4 Engine_Owner_SystemWorldToLocal;
	float4x4 Engine_Owner_SystemLocalToWorldTransposed;
	float4x4 Engine_Owner_SystemWorldToLocalTransposed;
	float4x4 Engine_Owner_SystemLocalToWorldNoScale;
	float4x4 Engine_Owner_SystemWorldToLocalNoScale;
	float4 Engine_Owner_Rotation;
	float3 Engine_Owner_Position;
	int Engine_Owner_PaddingInt32_0;
	float3 Engine_Owner_Velocity;
	int Engine_Owner_PaddingInt32_1;
	float3 Engine_Owner_SystemXAxis;
	int Engine_Owner_PaddingInt32_2;
	float3 Engine_Owner_SystemYAxis;
	int Engine_Owner_PaddingInt32_3;
	float3 Engine_Owner_SystemZAxis;
	int Engine_Owner_PaddingInt32_4;
	float3 Engine_Owner_Scale;
	int Engine_Owner_PaddingInt32_5;
	float4 Engine_Owner_LWCTile;
}

cbuffer FNiagaraEmitterParameters
{
	int Engine_Emitter_NumParticles;
	int Engine_Emitter_TotalSpawnedParticles;
	float Engine_Emitter_SpawnCountScale;
	float Emitter_Age;
	int Emitter_RandomSeed;
	int Engine_Emitter_InstanceSeed;
	int Engine_Emitter_PaddingInt32_0;
	int Engine_Emitter_PaddingInt32_1;
}

cbuffer FNiagaraExternalParameters
{
	float2 User_LifeRandomSparks;
	float2 User_SizeRandom;
	int Constants_Emitter_RandomRangeFloat003_RandomSeed;
	float3 Constants_Emitter_InitializeParticle_PositionOffset;
	float Emitter_DistanceTraveled;
	float2 User_SpeedRandomSparks;
	int Constants_Emitter_RandomRangeFloat004_RandomSeed;
	float Constants_Emitter_AddVelocity_ConeAngle;
	int Constants_Emitter_AddVelocity_RandomSeed;
	float3 Constants_Emitter_AddVelocity_ConeAxis;
	float Constants_Emitter_AddVelocity_SpeedFalloffFromConeAxis;
	float Constants_Emitter_AddVelocity_DistributionAlongConeAxis;
	float Constants_Emitter_AddVelocity_InnerConeAngle;
	float3 Constants_Emitter_AddVelocity_YawASC47PitchASC47Roll;
	float3 Constants_Emitter_AddVelocity_RotationAxis;
	float Constants_Emitter_AddVelocity_RotationAngle;
	float4 Constants_Emitter_AddVelocity_RotationQuaternion;
	float3 Constants_Emitter_AddVelocity_AdditionalYawASC47PitchASC47Roll;
	float Constants_Emitter_ApplyInitialForces_PositionalForceWarmupTime;
	float Constants_Emitter_ScaleSpriteSize_UniformCurveScale;
	float3 Constants_Emitter_GravityForce_Gravity;
	float Constants_Emitter_RandomRangeFloat002_Minimum;
	float Constants_Emitter_RandomRangeFloat002_Maximum;
	int Constants_Emitter_RandomRangeFloat002_RandomSeed;
	float Constants_Emitter_RandomRangeFloat001_Minimum;
	float Constants_Emitter_RandomRangeFloat001_Maximum;
	int Constants_Emitter_RandomRangeFloat001_RandomSeed;
	float Constants_Emitter_SolveForcesAndVelocity_SpeedLimit;
	float Constants_Emitter_SolveForcesAndVelocity_AccelerationLimit;
	int Engine_ExecutionCount;
	float Emitter_SpawnRate;
	float Emitter_SpawnInterval;
	float Emitter_InterpSpawnStartDt;
	int Emitter_SpawnGroup;
}

cbuffer PREV_FNiagaraGlobalParameters
{
	float PREV_Engine_WorldDeltaTime;
	float PREV_Engine_DeltaTime;
	float PREV_Engine_InverseDeltaTime;
	float PREV_Engine_Time;
	float PREV_Engine_RealTime;
	int PREV_Engine_QualityLevel;
	int PREV_Engine_PaddingInt32_0;
	int PREV_Engine_PaddingInt32_1;
}

cbuffer PREV_FNiagaraSystemParameters
{
	float PREV_Engine_Owner_TimeSinceRendered;
	float PREV_Engine_Owner_LODDistance;
	float PREV_Engine_Owner_LODDistanceFraction;
	float PREV_Engine_System_Age;
	int PREV_Engine_Owner_ExecutionState;
	int PREV_Engine_System_TickCount;
	int PREV_Engine_System_NumEmitters;
	int PREV_Engine_System_NumEmittersAlive;
	int PREV_Engine_System_SignificanceIndex;
	int PREV_Engine_System_RandomSeed;
	int PREV_Engine_System_CurrentTimeStep;
	int PREV_Engine_System_NumTimeSteps;
	float PREV_Engine_System_TimeStepFraction;
	int PREV_Engine_System_NumParticles;
	int PREV_Engine_System_PaddingInt32_0;
	int PREV_Engine_System_PaddingInt32_1;
}

cbuffer PREV_FNiagaraOwnerParameters
{
	float4x4 PREV_Engine_Owner_SystemLocalToWorld;
	float4x4 PREV_Engine_Owner_SystemWorldToLocal;
	float4x4 PREV_Engine_Owner_SystemLocalToWorldTransposed;
	float4x4 PREV_Engine_Owner_SystemWorldToLocalTransposed;
	float4x4 PREV_Engine_Owner_SystemLocalToWorldNoScale;
	float4x4 PREV_Engine_Owner_SystemWorldToLocalNoScale;
	float4 PREV_Engine_Owner_Rotation;
	float3 PREV_Engine_Owner_Position;
	int PREV_Engine_Owner_PaddingInt32_0;
	float3 PREV_Engine_Owner_Velocity;
	int PREV_Engine_Owner_PaddingInt32_1;
	float3 PREV_Engine_Owner_SystemXAxis;
	int PREV_Engine_Owner_PaddingInt32_2;
	float3 PREV_Engine_Owner_SystemYAxis;
	int PREV_Engine_Owner_PaddingInt32_3;
	float3 PREV_Engine_Owner_SystemZAxis;
	int PREV_Engine_Owner_PaddingInt32_4;
	float3 PREV_Engine_Owner_Scale;
	int PREV_Engine_Owner_PaddingInt32_5;
	float4 PREV_Engine_Owner_LWCTile;
}

cbuffer PREV_FNiagaraEmitterParameters
{
	int PREV_Engine_Emitter_NumParticles;
	int PREV_Engine_Emitter_TotalSpawnedParticles;
	float PREV_Engine_Emitter_SpawnCountScale;
	float PREV_Emitter_Age;
	int PREV_Emitter_RandomSeed;
	int PREV_Engine_Emitter_InstanceSeed;
	int PREV_Engine_Emitter_PaddingInt32_0;
	int PREV_Engine_Emitter_PaddingInt32_1;
}

cbuffer PREV_FNiagaraExternalParameters
{
	float2 PREV_User_LifeRandomSparks;
	float2 PREV_User_SizeRandom;
	int PREV_Constants_Emitter_RandomRangeFloat003_RandomSeed;
	float3 PREV_Constants_Emitter_InitializeParticle_PositionOffset;
	float PREV_Emitter_DistanceTraveled;
	float2 PREV_User_SpeedRandomSparks;
	int PREV_Constants_Emitter_RandomRangeFloat004_RandomSeed;
	float PREV_Constants_Emitter_AddVelocity_ConeAngle;
	int PREV_Constants_Emitter_AddVelocity_RandomSeed;
	float3 PREV_Constants_Emitter_AddVelocity_ConeAxis;
	float PREV_Constants_Emitter_AddVelocity_SpeedFalloffFromConeAxis;
	float PREV_Constants_Emitter_AddVelocity_DistributionAlongConeAxis;
	float PREV_Constants_Emitter_AddVelocity_InnerConeAngle;
	float3 PREV_Constants_Emitter_AddVelocity_YawASC47PitchASC47Roll;
	float3 PREV_Constants_Emitter_AddVelocity_RotationAxis;
	float PREV_Constants_Emitter_AddVelocity_RotationAngle;
	float4 PREV_Constants_Emitter_AddVelocity_RotationQuaternion;
	float3 PREV_Constants_Emitter_AddVelocity_AdditionalYawASC47PitchASC47Roll;
	float PREV_Constants_Emitter_ApplyInitialForces_PositionalForceWarmupTime;
	float PREV_Constants_Emitter_ScaleSpriteSize_UniformCurveScale;
	float3 PREV_Constants_Emitter_GravityForce_Gravity;
	float PREV_Constants_Emitter_RandomRangeFloat002_Minimum;
	float PREV_Constants_Emitter_RandomRangeFloat002_Maximum;
	int PREV_Constants_Emitter_RandomRangeFloat002_RandomSeed;
	float PREV_Constants_Emitter_RandomRangeFloat001_Minimum;
	float PREV_Constants_Emitter_RandomRangeFloat001_Maximum;
	int PREV_Constants_Emitter_RandomRangeFloat001_RandomSeed;
	float PREV_Constants_Emitter_SolveForcesAndVelocity_SpeedLimit;
	float PREV_Constants_Emitter_SolveForcesAndVelocity_AccelerationLimit;
	int PREV_Engine_ExecutionCount;
	float PREV_Emitter_SpawnRate;
	float PREV_Emitter_SpawnInterval;
	float PREV_Emitter_InterpSpawnStartDt;
	int PREV_Emitter_SpawnGroup;
}

struct FParamMap0_User
{
	float2 LifeRandomSparks;
	float2 SizeRandom;
	float2 SpeedRandomSparks;
};

struct FParamMap0_Transient
{
	float3 AdvectionVelocity;
	bool DragIgnoreMass;
	bool FirstFrame;
	float PhysicsDeltaTime;
	float PhysicsDrag;
	float3 PhysicsForce;
	float PhysicsRotationalDrag;
	float3 PhysicsRotationalForce;
	float2 SpriteSizeScaleFactor;
};

struct FParamMap0_SolveForcesAndVelocity
{
	float DeltaTime;
	float3 Force;
	float Mass;
	float3 Position;
	float3 PreviousVelocity;
	float3 Velocity;
	bool WritetoIntrinsicProperties;
};

struct FParamMap0_ScaleSpriteSize
{
	float2 InitialSpriteSize;
	float UniformCurveIndex;
};

struct FParamMap0_RandomRangeFloat004
{
	float Maximum;
	float Minimum;
};

struct FParamMap0_RandomRangeFloat003
{
	float Maximum;
	float Minimum;
};

struct FParamMap0_ParticleState
{
	float DeltaTime;
	float Lifetime;
};

struct FParamMap0_Particles_Previous
{
	float3 Position;
	float2 SpriteSize;
	float3 Velocity;
};

struct FParamMap0_Particles_Presolve
{
	float3 PhysicsForce;
	float3 Position;
	float3 Velocity;
};

struct FParamMap0_Particles_Initial
{
	float2 SpriteSize;
};

struct FParamMap0_Particles
{
	float Age;
	float DistanceTraveled;
	FParamMap0_Particles_Initial Initial;
	float Lifetime;
	float Mass;
	float MaterialRandom;
	float NormalizedAge;
	float3 Position;
	FParamMap0_Particles_Presolve Presolve;
	FParamMap0_Particles_Previous Previous;
	float RibbonUVDistance;
	float RotationalInertia;
	float3 RotationalVelocity;
	float2 SpriteSize;
	int UniqueID;
	float3 Velocity;
};

struct FParamMap0_OUTPUT_VAR_SolveForcesAndVelocity
{
	float IncomingPhysicsDrag;
	float3 IncomingPhysicsForce;
	float3 Position;
	float3 Velocity;
};

struct FParamMap0_OUTPUT_VAR_ParticleState
{
	bool FirstFrame;
};

struct FParamMap0_OUTPUT_VAR_ApplyInitialForces
{
	float3 IncomingPhysicsForce;
	float3 IncomingPhysicsRotationalForce;
};

struct FParamMap0_OUTPUT_VAR_AddVelocity
{
	float3 ConeAxis;
};

struct FParamMap0_OUTPUT_VAR
{
	FParamMap0_OUTPUT_VAR_AddVelocity AddVelocity;
	FParamMap0_OUTPUT_VAR_ApplyInitialForces ApplyInitialForces;
	FParamMap0_OUTPUT_VAR_ParticleState ParticleState;
	FParamMap0_OUTPUT_VAR_SolveForcesAndVelocity SolveForcesAndVelocity;
};

struct FParamMap0_Multiply_Float
{
	float A;
	float B;
};

struct FParamMap0_MakeFloatFromVector2d007
{
	int Channel;
	float2 Vector2D;
};

struct FParamMap0_MakeFloatFromVector2d006
{
	int Channel;
	float2 Vector2D;
};

struct FParamMap0_MakeFloatFromVector2d005
{
	int Channel;
	float2 Vector2D;
};

struct FParamMap0_MakeFloatFromVector2d004
{
	int Channel;
	float2 Vector2D;
};

struct FParamMap0_MakeFloatFromVector2d003
{
	int Channel;
	float2 Vector2D;
};

struct FParamMap0_MakeFloatFromVector2d002
{
	int Channel;
	float2 Vector2D;
};

struct FParamMap0_Local_SolveForcesAndVelocity
{
	float3 AdvectionVelocity;
	float DeltaTime;
	bool DragIgnoreMass;
	float3 DragVelocity;
	float InverseDeltaTime;
	float InverseMass;
	float Mass;
	float PhysicsDrag;
	float3 PhysicsForce;
};

struct FParamMap0_Local_ScaleSpriteSize
{
	float2 InitialSpriteSize;
};

struct FParamMap0_Local_InitializeParticle
{
	float InitRIbbonDistance;
};

struct FParamMap0_Local_ApplyInitialForces
{
	float3 PhysicsForce;
	float3 PhysicsRotationalForce;
};

struct FParamMap0_Local_AddVelocity_TransformStack_Rotation
{
	float3 LocalTransformBitangent;
	float3 LocalTransformNormal;
	float3 LocalTransformTangent;
	float3 LocalTransformVector;
};

struct FParamMap0_Local_AddVelocity
{
	float3 TransformedVector;
	FParamMap0_Local_AddVelocity_TransformStack_Rotation TransformStack_Rotation;
};

struct FParamMap0_Local
{
	FParamMap0_Local_AddVelocity AddVelocity;
	FParamMap0_Local_ApplyInitialForces ApplyInitialForces;
	FParamMap0_Local_InitializeParticle InitializeParticle;
	FParamMap0_Local_ScaleSpriteSize ScaleSpriteSize;
	FParamMap0_Local_SolveForcesAndVelocity SolveForcesAndVelocity;
};

struct FParamMap0_Interpolation
{
	float Emitter_InterpSpawnStartDt;
	int Emitter_SpawnGroup;
	float Emitter_SpawnInterval;
	int InterpSpawn_Index;
	float InterpSpawn_InvSpawnTime;
	float InterpSpawn_InvUpdateTime;
	float InterpSpawn_SpawnTime;
	float InterpSpawn_UpdateTime;
	float SpawnInterp;
};

struct FParamMap0_InitializeParticle
{
	float Lifetime;
	float MaterialRandom;
	int PositionOffsetCoordinateSpace;
	float UniformSpriteSizeMax;
	float UniformSpriteSizeMin;
};

struct FParamMap0_FloatFromCurve001
{
	float CurveIndex;
	float ScaleCurve;
};

struct FParamMap0_FloatFromCurve
{
	float CurveIndex;
	float ScaleCurve;
};

struct FParamMap0_Engine_System
{
	float Age;
	int CurrentTimeStep;
	int NumEmitters;
	int NumEmittersAlive;
	int NumParticles;
	int NumTimeSteps;
	int PaddingInt32_0;
	int PaddingInt32_1;
	int RandomSeed;
	int SignificanceIndex;
	int TickCount;
	float TimeStepFraction;
};

struct FParamMap0_Engine_Owner
{
	int ExecutionState;
	float LODDistance;
	float LODDistanceFraction;
	float4 LWCTile;
	int PaddingInt32_0;
	int PaddingInt32_1;
	int PaddingInt32_2;
	int PaddingInt32_3;
	int PaddingInt32_4;
	int PaddingInt32_5;
	float3 Position;
	float4 Rotation;
	float3 Scale;
	float4x4 SystemLocalToWorld;
	float4x4 SystemLocalToWorldNoScale;
	float4x4 SystemLocalToWorldTransposed;
	float4x4 SystemWorldToLocal;
	float4x4 SystemWorldToLocalNoScale;
	float4x4 SystemWorldToLocalTransposed;
	float3 SystemXAxis;
	float3 SystemYAxis;
	float3 SystemZAxis;
	float TimeSinceRendered;
	float3 Velocity;
};

struct FParamMap0_Engine_Emitter
{
	int InstanceSeed;
	int NumParticles;
	int PaddingInt32_0;
	int PaddingInt32_1;
	float SpawnCountScale;
	int TotalSpawnedParticles;
};

struct FParamMap0_Engine
{
	float DeltaTime;
	FParamMap0_Engine_Emitter Emitter;
	int ExecutionCount;
	float InverseDeltaTime;
	FParamMap0_Engine_Owner Owner;
	int PaddingInt32_0;
	int PaddingInt32_1;
	int QualityLevel;
	float RealTime;
	FParamMap0_Engine_System System;
	float Time;
	float WorldDeltaTime;
};

struct FParamMap0_Emitter
{
	float Age;
	float DistanceTraveled;
	float InterpSpawnStartDt;
	int RandomSeed;
	int SpawnGroup;
	float SpawnInterval;
	float SpawnRate;
};

struct FParamMap0_Drag
{
	float Drag;
	bool IgnoreMass;
	float RotationalDrag;
};

struct FParamMap0_DataInstance
{
	bool Alive;
};

struct FParamMap0_Array_Previous
{
	int Position;
	int SpriteSize;
	int Velocity;
};

struct FParamMap0_Array_Presolve
{
	int PhysicsForce;
	int Position;
	int Velocity;
};

struct FParamMap0_Array_Initial
{
	int SpriteSize;
};

struct FParamMap0_Array
{
	int Age;
	int DistanceTraveled;
	FParamMap0_Array_Initial Initial;
	int Lifetime;
	int Mass;
	int MaterialRandom;
	int NormalizedAge;
	int Position;
	FParamMap0_Array_Presolve Presolve;
	FParamMap0_Array_Previous Previous;
	int RibbonUVDistance;
	int RotationalInertia;
	int RotationalVelocity;
	int SpriteSize;
	int UniqueID;
	int Velocity;
};

struct FParamMap0_ApplyInitialForces
{
	bool ApplyForcetoPosition;
	bool ApplyForcetoVelocity;
	bool ApplyRotationalForcetoRotationalVelocity;
};

struct FParamMap0_AddVelocity
{
	bool InvertRotationQuaternion;
	int RotationCoordinateSpace;
	float4x4 RotationMatrix;
	bool UseConeFalloff;
	bool UseVelDistribution;
	float VelocitySpeed;
};

struct FParamMap0
{
	FParamMap0_AddVelocity AddVelocity;
	FParamMap0_ApplyInitialForces ApplyInitialForces;
	FParamMap0_Array Array;
	FParamMap0_DataInstance DataInstance;
	FParamMap0_Drag Drag;
	FParamMap0_Emitter Emitter;
	FParamMap0_Engine Engine;
	FParamMap0_FloatFromCurve FloatFromCurve;
	FParamMap0_FloatFromCurve001 FloatFromCurve001;
	FParamMap0_InitializeParticle InitializeParticle;
	FParamMap0_Interpolation Interpolation;
	FParamMap0_Local Local;
	FParamMap0_MakeFloatFromVector2d002 MakeFloatFromVector2d002;
	FParamMap0_MakeFloatFromVector2d003 MakeFloatFromVector2d003;
	FParamMap0_MakeFloatFromVector2d004 MakeFloatFromVector2d004;
	FParamMap0_MakeFloatFromVector2d005 MakeFloatFromVector2d005;
	FParamMap0_MakeFloatFromVector2d006 MakeFloatFromVector2d006;
	FParamMap0_MakeFloatFromVector2d007 MakeFloatFromVector2d007;
	FParamMap0_Multiply_Float Multiply_Float;
	FParamMap0_OUTPUT_VAR OUTPUT_VAR;
	FParamMap0_Particles Particles;
	FParamMap0_ParticleState ParticleState;
	FParamMap0_RandomRangeFloat003 RandomRangeFloat003;
	FParamMap0_RandomRangeFloat004 RandomRangeFloat004;
	FParamMap0_ScaleSpriteSize ScaleSpriteSize;
	FParamMap0_SolveForcesAndVelocity SolveForcesAndVelocity;
	FParamMap0_Transient Transient;
	FParamMap0_User User;
};

struct FSimulationContext
{
	FParamMap0 MapSpawn;
	FParamMap0 MapUpdate;
};

static float HackSpawnInterp = 1.0;
void NiagaraScript_1968_Func_(int In_TargetChannel, float2 In_Vector2D, out float Out_Float, inout FSimulationContext Context);
void MakeFloatFromVector2d004_Emitter_Func_(out float Out_Float, inout FSimulationContext Context);
void MakeFloatFromVector2d005_Emitter_Func_(out float Out_Float, inout FSimulationContext Context);
void MakeFloatFromVector2d002_Emitter_Func_(out float Out_Float, inout FSimulationContext Context);
void MakeFloatFromVector2d003_Emitter_Func_(out float Out_Float, inout FSimulationContext Context);
void NiagaraScript_1936_ScriptUsage4_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_(int In_Engine_System_RandomSeed, float In_FloatMin, float In_FloatMax, int In_Seed, int In_Engine_System_TickCount, int In_Particles_UniqueID, int In_Emitter_RandomSeed, int In_Engine_Emitter_InstanceSeed, out float Out_RandomFloat, out bool Out_IsDeterministic, inout FSimulationContext Context);
void RandomRangeFloat003_Emitter_Func_(out float Out_UniformRangedFloat, inout FSimulationContext Context);
void NiagaraScript_1966_Func_(float3 In_Engine_Owner_Position, out float3 Out_SimulationPosition, inout FSimulationContext Context);
void InitializeParticle_Emitter_Func_(inout FSimulationContext Context);
void MakeFloatFromVector2d006_Emitter_Func_(out float Out_Float, inout FSimulationContext Context);
void MakeFloatFromVector2d007_Emitter_Func_(out float Out_Float, inout FSimulationContext Context);
void RandomRangeFloat004_Emitter_Func_(out float Out_UniformRangedFloat, inout FSimulationContext Context);
void NiagaraScript_1940_Func_(float In_Value, out float Out_ClampedValue, inout FSimulationContext Context);
void NiagaraScript_1939_Func_(float3 In_V, float3 In_Fallback, float In_Threshold, out float3 Out_Direction, out float Out_Length, out bool Out_BelowThreshold, inout FSimulationContext Context);
void NiagaraScript_1937_AngleInput_NewEnumerator0_AngleOutput_NewEnumerator2_Func_(float In_Angle, out float Out_ConvertedAngle, inout FSimulationContext Context);
void NiagaraScript_1937_AngleInput_NewEnumerator0_AngleOutput_NewEnumerator1_Func_(float In_Angle, out float Out_ConvertedAngle, inout FSimulationContext Context);
void CustomHlsl5A25A2A4455E3C692D3322A954DF887F_Func_(float3 In_From, float3 In_To, out float4 Out_Result);
void NiagaraScript_1938_Func_(float3 In_From, float3 In_To, out float4 Out_NewOutput, inout FSimulationContext Context);
void NiagaraScript_1935_Func_(float3 In_VECTOR_VAR, float4 In_Quaternion, out float3 Out_Vector, inout FSimulationContext Context);
void NiagaraScript_1934_AngleInput_NewEnumerator0_EnableConeAxisRotation_true_EnableFlattenedEndcaps_false_EnableRandomPosition_true_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_(float In_Angle, float In_Scale, float In_ConeDistribution, float In_RadialAngle, int In_Seed, float3 In_ConeAxis, float In_InnerAngle, out float3 Out_ConeVector, out float3 Out_ConeNormal, out float3 Out_ConeTangent, inout FSimulationContext Context);
void NiagaraScript_1943_Func_(int In_SourceSpace, int In_DestinationSpace, float4x4 In_LocalToWorldTransform, float4x4 In_WorldToLocalTransform, bool In_bLocalSpace, out bool Out_bUseOriginal, out float4x4 Out_OutTransform, out bool Out_LocalToWorld, inout FSimulationContext Context);
void AddVelocity_TransformStack_Rotation_TransformVector002_Emitter_Func_(float3 In_InVector, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutVector, inout FSimulationContext Context);
void AddVelocity_TransformStack_Rotation_TransformVector001_Emitter_Func_(float3 In_InVector, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutVector, inout FSimulationContext Context);
void AddVelocity_TransformStack_Rotation_TransformVector003_Emitter_Func_(float3 In_InVector, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutVector, inout FSimulationContext Context);
void AddVelocity_TransformStack_Rotation_TransformVector004_Emitter_Func_(float3 In_InVector, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutVector, inout FSimulationContext Context);
void AddVelocity_TransformStack_Rotation_Emitter_Func_(float3 In_InputVector, int In_RotationCoordinateSpace, float3 In_YawASC47PitchASC47Roll, float3 In_RotationAxis, float In_RotationAngle, float4 In_RotationQuaternion, bool In_InvertRotationQuaternion, float3 In_AdditionalYawASC47PitchASC47Roll, float4x4 In_RotationMatrix, float3 In_InputNormal, float3 In_InputTangent, float3 In_InputBitangent, out float3 Out_TransformedVector, out float3 Out_TransformedNormal, out float3 Out_TransformedTangent, out float3 Out_TransformedBitangent, inout FSimulationContext Context);
void AddVelocity_Emitter_Func_(inout FSimulationContext Context);
void ApplyInitialForces_Emitter_Func_(inout FSimulationContext Context);
void ParticleState_Emitter_Func_(inout FSimulationContext Context);
void SampleCurve_Emitter_ScaleSpriteSize_UniformCurveSpriteScale(float In_X, out float Out_Value);
void ScaleSpriteSize_Emitter_Func_(inout FSimulationContext Context);
void GravityForce_NF_TransformVector_Emitter_Func_(float3 In_InVector, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutVector, inout FSimulationContext Context);
void GravityForce_Emitter_Func_(inout FSimulationContext Context);
void NiagaraScript_1936_ScriptUsage5_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_(int In_Engine_System_RandomSeed, float In_FloatMin, float In_FloatMax, int In_Seed, int In_Engine_System_TickCount, int In_Particles_UniqueID, int In_Emitter_RandomSeed, int In_Engine_Emitter_InstanceSeed, out float Out_RandomFloat, out bool Out_IsDeterministic, inout FSimulationContext Context);
void RandomRangeFloat002_Emitter_Func_(out float Out_UniformRangedFloat, inout FSimulationContext Context);
void RandomRangeFloat001_Emitter_Func_(out float Out_UniformRangedFloat, inout FSimulationContext Context);
void SampleCurve_Emitter_FloatFromCurve_FloatCurve(float In_X, out float Out_Value);
void FloatFromCurve_Emitter_Func_(out float Out_Value, inout FSimulationContext Context);
void CustomHlslB74F9E504381758A16BB98A1135669A9_Func_(out float Out_CustomHLSLOutput, inout FSimulationContext Context);
void SampleCurve_Emitter_FloatFromCurve001_FloatCurve(float In_X, out float Out_Value);
void FloatFromCurve001_Emitter_Func_(out float Out_Value, inout FSimulationContext Context);
void Multiply_Float_Emitter_Func_(out float Out_Result, inout FSimulationContext Context);
void Drag_Emitter_Func_(inout FSimulationContext Context);
void NiagaraScript_1971_Func_(float3 In_Velocity, float3 In_AdvectionVelocity, float In_InverseMass, float In_Drag, float In_DeltaTime, bool In_IgnoreMass, out float3 Out_Output, inout FSimulationContext Context);
void SolveForcesAndVelocity_Emitter_Func_(inout FSimulationContext Context);
float GetSpawnInterpolation();
void NiagaraScript_1968_Func_(int In_TargetChannel, float2 In_Vector2D, out float Out_Float, inout FSimulationContext Context)
{
	float X;
	float Y;
	X = In_Vector2D.x;
	Y = In_Vector2D.y;
	float Constant18 = (0.0);
	float NiagaraFloat_SelectResult = Constant18;
	NiagaraFloat_SelectResult = X;
	if(In_TargetChannel == 1)
	{ 
	NiagaraFloat_SelectResult = Y;
	}
	Out_Float = NiagaraFloat_SelectResult;
}

void MakeFloatFromVector2d004_Emitter_Func_(out float Out_Float, inout FSimulationContext Context)
{
	float NiagaraScript_1968_Func_Output_Float;
	NiagaraScript_1968_Func_(Context.MapSpawn.MakeFloatFromVector2d004.Channel, Context.MapSpawn.MakeFloatFromVector2d004.Vector2D, NiagaraScript_1968_Func_Output_Float, Context);
	Out_Float = NiagaraScript_1968_Func_Output_Float;
}

void MakeFloatFromVector2d005_Emitter_Func_(out float Out_Float, inout FSimulationContext Context)
{
	float NiagaraScript_1968_Func_Output_Float1;
	NiagaraScript_1968_Func_(Context.MapSpawn.MakeFloatFromVector2d005.Channel, Context.MapSpawn.MakeFloatFromVector2d005.Vector2D, NiagaraScript_1968_Func_Output_Float1, Context);
	Out_Float = NiagaraScript_1968_Func_Output_Float1;
}

void MakeFloatFromVector2d002_Emitter_Func_(out float Out_Float, inout FSimulationContext Context)
{
	float NiagaraScript_1968_Func_Output_Float2;
	NiagaraScript_1968_Func_(Context.MapSpawn.MakeFloatFromVector2d002.Channel, Context.MapSpawn.MakeFloatFromVector2d002.Vector2D, NiagaraScript_1968_Func_Output_Float2, Context);
	Out_Float = NiagaraScript_1968_Func_Output_Float2;
}

void MakeFloatFromVector2d003_Emitter_Func_(out float Out_Float, inout FSimulationContext Context)
{
	float NiagaraScript_1968_Func_Output_Float3;
	NiagaraScript_1968_Func_(Context.MapSpawn.MakeFloatFromVector2d003.Channel, Context.MapSpawn.MakeFloatFromVector2d003.Vector2D, NiagaraScript_1968_Func_Output_Float3, Context);
	Out_Float = NiagaraScript_1968_Func_Output_Float3;
}

void NiagaraScript_1936_ScriptUsage4_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_(int In_Engine_System_RandomSeed, float In_FloatMin, float In_FloatMax, int In_Seed, int In_Engine_System_TickCount, int In_Particles_UniqueID, int In_Emitter_RandomSeed, int In_Engine_Emitter_InstanceSeed, out float Out_RandomFloat, out bool Out_IsDeterministic, inout FSimulationContext Context)
{
	bool Constant25 = false;
	float Result = In_FloatMax - In_FloatMin;
	float Result1 = rand_float(Result);
	float Result2 = In_FloatMin + Result1;
	Out_RandomFloat = Result2;
	Out_IsDeterministic = Constant25;
}

void RandomRangeFloat003_Emitter_Func_(out float Out_UniformRangedFloat, inout FSimulationContext Context)
{
	int Constant20 = (0);
	int Constant21 = (0);
	int Constant22 = 0;
	int Constant23 = (0);
	int Constant24 = (0);
	float NiagaraScript_1936_ScriptUsage4_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_Output_RandomFloat;
	bool NiagaraScript_1936_ScriptUsage4_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_Output_IsDeterministic;
	NiagaraScript_1936_ScriptUsage4_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_(Constant20, Context.MapSpawn.RandomRangeFloat003.Minimum, Context.MapSpawn.RandomRangeFloat003.Maximum, Constants_Emitter_RandomRangeFloat003_RandomSeed, Constant21, Constant22, Constant23, Constant24, NiagaraScript_1936_ScriptUsage4_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_Output_RandomFloat, NiagaraScript_1936_ScriptUsage4_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_Output_IsDeterministic, Context);
	Out_UniformRangedFloat = NiagaraScript_1936_ScriptUsage4_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_Output_RandomFloat;
}

void NiagaraScript_1966_Func_(float3 In_Engine_Owner_Position, out float3 Out_SimulationPosition, inout FSimulationContext Context)
{
	float3 Constant43 = float3(0,0,0);
	Out_SimulationPosition = Constant43;
}

void InitializeParticle_Emitter_Func_(inout FSimulationContext Context)
{
	Context.MapSpawn.Particles.MaterialRandom = Context.MapSpawn.InitializeParticle.MaterialRandom;
	Context.MapSpawn.Particles.Lifetime = Context.MapSpawn.InitializeParticle.Lifetime;
	float Constant35 = 1;
	Context.MapSpawn.Particles.Mass = Constant35;
	int Constant36 = (0);
	int Constant37 = -1;
	int Constant38 = (0);
	int Constant39 = 0;
	int Constant40 = (0);
	int Constant41 = (0);
	float NiagaraScript_1936_ScriptUsage4_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_Output_RandomFloat2;
	bool NiagaraScript_1936_ScriptUsage4_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_Output_IsDeterministic2;
	NiagaraScript_1936_ScriptUsage4_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_(Constant36, Context.MapSpawn.InitializeParticle.UniformSpriteSizeMin, Context.MapSpawn.InitializeParticle.UniformSpriteSizeMax, Constant37, Constant38, Constant39, Constant40, Constant41, NiagaraScript_1936_ScriptUsage4_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_Output_RandomFloat2, NiagaraScript_1936_ScriptUsage4_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_Output_IsDeterministic2, Context);
	float2 Output1;
	Output1.x = NiagaraScript_1936_ScriptUsage4_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_Output_RandomFloat2;
	Output1.y = NiagaraScript_1936_ScriptUsage4_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_Output_RandomFloat2;
	Context.MapSpawn.Particles.SpriteSize = Output1;
	float3 Constant42 = float3(0,0,0);
	float3 NiagaraScript_1966_Func_Output_SimulationPosition;
	NiagaraScript_1966_Func_(Constant42, NiagaraScript_1966_Func_Output_SimulationPosition, Context);
	float Constant44 = 0;
	float3 Result3 = Constants_Emitter_InitializeParticle_PositionOffset * Constant44;
	float3 Result4 = NiagaraScript_1966_Func_Output_SimulationPosition + Result3;
	Context.MapSpawn.Particles.Position = Result4;
	Context.MapSpawn.Local.InitializeParticle.InitRIbbonDistance = Context.MapSpawn.Particles.RibbonUVDistance;
}

void MakeFloatFromVector2d006_Emitter_Func_(out float Out_Float, inout FSimulationContext Context)
{
	float NiagaraScript_1968_Func_Output_Float4;
	NiagaraScript_1968_Func_(Context.MapSpawn.MakeFloatFromVector2d006.Channel, Context.MapSpawn.MakeFloatFromVector2d006.Vector2D, NiagaraScript_1968_Func_Output_Float4, Context);
	Out_Float = NiagaraScript_1968_Func_Output_Float4;
}

void MakeFloatFromVector2d007_Emitter_Func_(out float Out_Float, inout FSimulationContext Context)
{
	float NiagaraScript_1968_Func_Output_Float5;
	NiagaraScript_1968_Func_(Context.MapSpawn.MakeFloatFromVector2d007.Channel, Context.MapSpawn.MakeFloatFromVector2d007.Vector2D, NiagaraScript_1968_Func_Output_Float5, Context);
	Out_Float = NiagaraScript_1968_Func_Output_Float5;
}

void RandomRangeFloat004_Emitter_Func_(out float Out_UniformRangedFloat, inout FSimulationContext Context)
{
	int Constant47 = (0);
	int Constant48 = (0);
	int Constant49 = 0;
	int Constant50 = (0);
	int Constant51 = (0);
	float NiagaraScript_1936_ScriptUsage4_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_Output_RandomFloat3;
	bool NiagaraScript_1936_ScriptUsage4_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_Output_IsDeterministic3;
	NiagaraScript_1936_ScriptUsage4_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_(Constant47, Context.MapSpawn.RandomRangeFloat004.Minimum, Context.MapSpawn.RandomRangeFloat004.Maximum, Constants_Emitter_RandomRangeFloat004_RandomSeed, Constant48, Constant49, Constant50, Constant51, NiagaraScript_1936_ScriptUsage4_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_Output_RandomFloat3, NiagaraScript_1936_ScriptUsage4_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_Output_IsDeterministic3, Context);
	Out_UniformRangedFloat = NiagaraScript_1936_ScriptUsage4_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_Output_RandomFloat3;
}

void NiagaraScript_1940_Func_(float In_Value, out float Out_ClampedValue, inout FSimulationContext Context)
{
	float Constant60 = 0;
	float Constant61 = 1;
	float Result5 = clamp(In_Value,Constant60,Constant61);
	Out_ClampedValue = Result5;
}

void NiagaraScript_1939_Func_(float3 In_V, float3 In_Fallback, float In_Threshold, out float3 Out_Direction, out float Out_Length, out bool Out_BelowThreshold, inout FSimulationContext Context)
{
	float Result8 = dot(In_V,In_V);
	float Result9 = In_Threshold * In_Threshold;
	bool Result10 = NiagaraAll(Result8 < Result9);
	float Result11 = length(In_Fallback);
	float Result12 = rsqrt(Result8);
	float3 Result13 = In_V * Result12;
	float Result14 = Reciprocal(Result12);
	float3 Constant73 = float3(0.0, 0.0, 0.0);
	float3 Direction_SelectResult2 = Constant73;
	float Constant74 = (0.0);
	float Length_SelectResult2 = Constant74;
	Direction_SelectResult2 = In_Fallback;
	Length_SelectResult2 = Result11;
	if(Result10 == 0)
	{ 
	Direction_SelectResult2 = Result13;
	Length_SelectResult2 = Result14;
	}
	Out_Direction = Direction_SelectResult2;
	Out_Length = Length_SelectResult2;
	Out_BelowThreshold = Result10;
}

void NiagaraScript_1937_AngleInput_NewEnumerator0_AngleOutput_NewEnumerator2_Func_(float In_Angle, out float Out_ConvertedAngle, inout FSimulationContext Context)
{
	float Result19 = (PI/180.0f)*(In_Angle);
	Out_ConvertedAngle = Result19;
}

void NiagaraScript_1937_AngleInput_NewEnumerator0_AngleOutput_NewEnumerator1_Func_(float In_Angle, out float Out_ConvertedAngle, inout FSimulationContext Context)
{
	float Constant88 = 360;
	float Result22 = In_Angle / Constant88;
	Out_ConvertedAngle = Result22;
}

void CustomHlsl5A25A2A4455E3C692D3322A954DF887F_Func_(float3 In_From, float3 In_To, out float4 Out_Result)
{


	const float NormAB = sqrt(dot(In_From, In_From) * dot(In_To, In_To));
	
	float W = NormAB + dot(In_From, In_To);
	float4 ValidResult = float4(cross(In_From, In_To), W);
	float4 FallbackX = float4(-In_From.z, 0.0f, In_From.x, 0.0f);
	float4 FallbackY = float4(0.0f, -In_From.z, In_From.y, 0.0f);
	float4 Identity = float4(0.0f, 0.0f, 0.0f, 1.0f);
	
	const float Epsilon = 1e-6f;
	
	if (abs(In_From.x) > abs(In_From.y))
	{
	    Out_Result = FallbackX;
	}
	else 
	{
	    Out_Result = FallbackY;
	}
	
	if (W >= 1e-6f * NormAB)
	{
	    Out_Result = ValidResult;
	}
	
	if (NormAB < Epsilon)
	{
	    Out_Result = Identity;
	}
	else
	{
	    
	    Out_Result = normalize(Out_Result);
	}
}

void NiagaraScript_1938_Func_(float3 In_From, float3 In_To, out float4 Out_NewOutput, inout FSimulationContext Context)
{
	float3 Constant111 = float3(1,0,0);
	float Constant112 = 1e-05;
	float3 NiagaraScript_1939_Func_Output_Direction1;
	float NiagaraScript_1939_Func_Output_Length1;
	bool NiagaraScript_1939_Func_Output_BelowThreshold1;
	NiagaraScript_1939_Func_(In_From, Constant111, Constant112, NiagaraScript_1939_Func_Output_Direction1, NiagaraScript_1939_Func_Output_Length1, NiagaraScript_1939_Func_Output_BelowThreshold1, Context);
	float3 Constant113 = float3(1,0,0);
	float Constant114 = 1e-05;
	float3 NiagaraScript_1939_Func_Output_Direction2;
	float NiagaraScript_1939_Func_Output_Length2;
	bool NiagaraScript_1939_Func_Output_BelowThreshold2;
	NiagaraScript_1939_Func_(In_To, Constant113, Constant114, NiagaraScript_1939_Func_Output_Direction2, NiagaraScript_1939_Func_Output_Length2, NiagaraScript_1939_Func_Output_BelowThreshold2, Context);
	float4 CustomHlsl5A25A2A4455E3C692D3322A954DF887F_Func_Output_Result;
	CustomHlsl5A25A2A4455E3C692D3322A954DF887F_Func_(NiagaraScript_1939_Func_Output_Direction1, NiagaraScript_1939_Func_Output_Direction2, CustomHlsl5A25A2A4455E3C692D3322A954DF887F_Func_Output_Result);
	Out_NewOutput = CustomHlsl5A25A2A4455E3C692D3322A954DF887F_Func_Output_Result;
}

void NiagaraScript_1935_Func_(float3 In_VECTOR_VAR, float4 In_Quaternion, out float3 Out_Vector, inout FSimulationContext Context)
{
	float3 Output0;
	float Output14;
	Output0.x = In_Quaternion.x;
	Output0.y = In_Quaternion.y;
	Output0.z = In_Quaternion.z;
	Output14 = In_Quaternion.w;
	float Result39 = dot(Output0,In_VECTOR_VAR);
	float Constant115 = 2;
	float Result40 = Result39 * Constant115;
	float3 Result41 = Output0 * Result40;
	float Result42 = Output14 * Output14;
	float Result43 = dot(Output0,Output0);
	float Result44 = Result42 - Result43;
	float3 Result45 = Result44 * In_VECTOR_VAR;
	float3 Result46 = Result41 + Result45;
	float3 Result47 = cross(Output0,In_VECTOR_VAR);
	float Constant116 = 2;
	float Result48 = Output14 * Constant116;
	float3 Result49 = Result47 * Result48;
	float3 Result50 = Result46 + Result49;
	Out_Vector = Result50;
}

void NiagaraScript_1934_AngleInput_NewEnumerator0_EnableConeAxisRotation_true_EnableFlattenedEndcaps_false_EnableRandomPosition_true_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_(float In_Angle, float In_Scale, float In_ConeDistribution, float In_RadialAngle, int In_Seed, float3 In_ConeAxis, float In_InnerAngle, out float3 Out_ConeVector, out float3 Out_ConeNormal, out float3 Out_ConeTangent, inout FSimulationContext Context)
{
	float Constant75 = 0;
	float Result15 = max(In_ConeDistribution, Constant75);
	float Constant76 = 1;
	bool Result16 = NiagaraAll(Result15 == Constant76);
	int Constant77 = (0);
	float Constant78 = 1;
	int Constant79 = (0);
	int Constant80 = 0;
	int Constant81 = (0);
	int Constant82 = (0);
	float NiagaraScript_1936_ScriptUsage4_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_Output_RandomFloat5;
	bool NiagaraScript_1936_ScriptUsage4_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_Output_IsDeterministic5;
	NiagaraScript_1936_ScriptUsage4_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_(Constant77, Result15, Constant78, In_Seed, Constant79, Constant80, Constant81, Constant82, NiagaraScript_1936_ScriptUsage4_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_Output_RandomFloat5, NiagaraScript_1936_ScriptUsage4_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_Output_IsDeterministic5, Context);
	float Constant83 = 0.333333;
	float Result17 = pow(max(0, NiagaraScript_1936_ScriptUsage4_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_Output_RandomFloat5),Constant83);
	float Constant84 = (0.0);
	float NiagaraFloat_SelectResult3 = Constant84;
	NiagaraFloat_SelectResult3 = Result15;
	if(Result16 == 0)
	{ 
	NiagaraFloat_SelectResult3 = Result17;
	}
	int Constant85 = (0);
	float Constant86 = 0.5;
	float Result18 = In_Angle * Constant86;
	float NiagaraScript_1937_AngleInput_NewEnumerator0_AngleOutput_NewEnumerator2_Func_Output_ConvertedAngle;
	NiagaraScript_1937_AngleInput_NewEnumerator0_AngleOutput_NewEnumerator2_Func_(Result18, NiagaraScript_1937_AngleInput_NewEnumerator0_AngleOutput_NewEnumerator2_Func_Output_ConvertedAngle, Context);
	float Result20 = cos(NiagaraScript_1937_AngleInput_NewEnumerator0_AngleOutput_NewEnumerator2_Func_Output_ConvertedAngle);
	float Constant87 = 0.5;
	float Result21 = In_InnerAngle * Constant87;
	float NiagaraScript_1937_AngleInput_NewEnumerator0_AngleOutput_NewEnumerator1_Func_Output_ConvertedAngle;
	NiagaraScript_1937_AngleInput_NewEnumerator0_AngleOutput_NewEnumerator1_Func_(Result21, NiagaraScript_1937_AngleInput_NewEnumerator0_AngleOutput_NewEnumerator1_Func_Output_ConvertedAngle, Context);
	float Result23 = 1 - NiagaraScript_1937_AngleInput_NewEnumerator0_AngleOutput_NewEnumerator1_Func_Output_ConvertedAngle;
	float Constant89 = 1;
	float Result24 = cos(Result23*(TWO_PI/Constant89));
	int Constant90 = (0);
	int Constant91 = 0;
	int Constant92 = (0);
	int Constant93 = (0);
	float NiagaraScript_1936_ScriptUsage4_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_Output_RandomFloat6;
	bool NiagaraScript_1936_ScriptUsage4_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_Output_IsDeterministic6;
	NiagaraScript_1936_ScriptUsage4_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_(Constant85, Result20, Result24, In_Seed, Constant90, Constant91, Constant92, Constant93, NiagaraScript_1936_ScriptUsage4_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_Output_RandomFloat6, NiagaraScript_1936_ScriptUsage4_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_Output_IsDeterministic6, Context);
	float Result25 = acos(clamp(NiagaraScript_1936_ScriptUsage4_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_Output_RandomFloat6, -1.0f, 1.0f));
	float Result26 = cos(Result25);
	float Constant94 = 0;
	float Constant95 = 0;
	float Constant96 = 1;
	float3 Output11;
	Output11.x = Constant94;
	Output11.y = Constant95;
	Output11.z = Constant96;
	float3 Result27 = Result26 * Output11;
	float Result28 = sin(Result25);
	int Constant97 = (0);
	float Constant98 = 0;
	float NiagaraScript_1937_AngleInput_NewEnumerator0_AngleOutput_NewEnumerator2_Func_Output_ConvertedAngle1;
	NiagaraScript_1937_AngleInput_NewEnumerator0_AngleOutput_NewEnumerator2_Func_(In_RadialAngle, NiagaraScript_1937_AngleInput_NewEnumerator0_AngleOutput_NewEnumerator2_Func_Output_ConvertedAngle1, Context);
	float Constant99 = 0;
	float Result29 = TWO_PI;
	float Result30 = clamp(NiagaraScript_1937_AngleInput_NewEnumerator0_AngleOutput_NewEnumerator2_Func_Output_ConvertedAngle1,Constant99,Result29);
	int Constant100 = (0);
	int Constant101 = 0;
	int Constant102 = (0);
	int Constant103 = (0);
	float NiagaraScript_1936_ScriptUsage4_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_Output_RandomFloat7;
	bool NiagaraScript_1936_ScriptUsage4_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_Output_IsDeterministic7;
	NiagaraScript_1936_ScriptUsage4_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_(Constant97, Constant98, Result30, In_Seed, Constant100, Constant101, Constant102, Constant103, NiagaraScript_1936_ScriptUsage4_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_Output_RandomFloat7, NiagaraScript_1936_ScriptUsage4_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_Output_IsDeterministic7, Context);
	float Result31 = cos(NiagaraScript_1936_ScriptUsage4_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_Output_RandomFloat7);
	float Constant104 = 1;
	float Constant105 = 0;
	float Constant106 = 0;
	float3 Output12;
	Output12.x = Constant104;
	Output12.y = Constant105;
	Output12.z = Constant106;
	float3 Result32 = Result31 * Output12;
	float Result33 = sin(NiagaraScript_1936_ScriptUsage4_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_Output_RandomFloat7);
	float Constant107 = 0;
	float Constant108 = 1;
	float Constant109 = 0;
	float3 Output13;
	Output13.x = Constant107;
	Output13.y = Constant108;
	Output13.z = Constant109;
	float3 Result34 = Result33 * Output13;
	float3 Result35 = Result32 + Result34;
	float3 Result36 = Result28 * Result35;
	float3 Result37 = Result27 + Result36;
	float3 Result38 = NiagaraFloat_SelectResult3 * Result37;
	float3 Constant110 = float3(0,0,1);
	float4 NiagaraScript_1938_Func_Output_NewOutput;
	NiagaraScript_1938_Func_(Constant110, In_ConeAxis, NiagaraScript_1938_Func_Output_NewOutput, Context);
	float3 NiagaraScript_1935_Func_Output_Vector;
	NiagaraScript_1935_Func_(Result38, NiagaraScript_1938_Func_Output_NewOutput, NiagaraScript_1935_Func_Output_Vector, Context);
	float3 Result51 = NiagaraScript_1935_Func_Output_Vector * In_Scale;
	float3 Result52 = normalize(NiagaraScript_1935_Func_Output_Vector);
	float3 Result53 = cross(Result52,In_ConeAxis);
	float3 Result54 = cross(Result53,Result52);
	Out_ConeVector = Result51;
	Out_ConeNormal = Result52;
	Out_ConeTangent = Result54;
}

void NiagaraScript_1943_Func_(int In_SourceSpace, int In_DestinationSpace, float4x4 In_LocalToWorldTransform, float4x4 In_WorldToLocalTransform, bool In_bLocalSpace, out bool Out_bUseOriginal, out float4x4 Out_OutTransform, out bool Out_LocalToWorld, inout FSimulationContext Context)
{
	int Constant126 = 0;
	bool Result60 = NiagaraAll(In_SourceSpace == Constant126);
	int Constant127 = 0;
	bool Result61 = NiagaraAll(In_DestinationSpace == Constant127);
	bool Result62 = Result60 && Result61;
	int Constant128 = 1;
	bool Result63 = NiagaraAll(In_SourceSpace == Constant128);
	int Constant129 = 1;
	bool Result64 = NiagaraAll(In_DestinationSpace == Constant129);
	bool Result65 = Result63 && Result64;
	bool Result66 = Result62 || Result65;
	int Constant130 = 2;
	bool Result67 = NiagaraAll(In_SourceSpace == Constant130);
	int Constant131 = 2;
	bool Result68 = NiagaraAll(In_DestinationSpace == Constant131);
	bool Result69 = Result67 && Result68;
	bool Result70 = Result66 || Result69;
	bool Result71 = Result60 && Result68;
	bool Result72 = Result67 && Result61;
	bool Result73 = Result71 || Result72;
	bool Result74 = In_bLocalSpace && Result73;
	bool Result75 = Result70 || Result74;
	bool Result76 = !In_bLocalSpace;
	bool Result77 = Result60 && Result64;
	bool Result78 = Result63 && Result61;
	bool Result79 = Result77 || Result78;
	bool Result80 = Result76 && Result79;
	bool Result81 = Result75 || Result80;
	bool Result82 = In_bLocalSpace && Result77;
	bool Result83 = Result67 && Result64;
	bool Result84 = Result82 || Result83;
	bool Result85 = Result76 && Result72;
	bool Result86 = Result84 || Result85;
	float4x4 Matrix_IfResult1;
	if(Result86)
	{
	Matrix_IfResult1 = In_LocalToWorldTransform;
	}
	else
	{
	Matrix_IfResult1 = In_WorldToLocalTransform;
	}
	Out_bUseOriginal = Result81;
	Out_OutTransform = Matrix_IfResult1;
	Out_LocalToWorld = Result86;
}

void AddVelocity_TransformStack_Rotation_TransformVector002_Emitter_Func_(float3 In_InVector, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutVector, inout FSimulationContext Context)
{
	bool Constant125 = true;
	float4x4 Matrix_IfResult;
	float4x4 Matrix001_IfResult;
	if(In_ApplyScale)
	{
	Matrix_IfResult = Context.MapSpawn.Engine.Owner.SystemLocalToWorld;
	Matrix001_IfResult = Context.MapSpawn.Engine.Owner.SystemWorldToLocal;
	}
	else
	{
	Matrix_IfResult = Context.MapSpawn.Engine.Owner.SystemLocalToWorldNoScale;
	Matrix001_IfResult = Context.MapSpawn.Engine.Owner.SystemWorldToLocalNoScale;
	}
	bool NiagaraScript_1943_Func_Output_bUseOriginal;
	float4x4 NiagaraScript_1943_Func_Output_OutTransform;
	bool NiagaraScript_1943_Func_Output_LocalToWorld;
	NiagaraScript_1943_Func_(In_SourceSpace, In_DestinationSpace, Matrix_IfResult, Matrix001_IfResult, Constant125, NiagaraScript_1943_Func_Output_bUseOriginal, NiagaraScript_1943_Func_Output_OutTransform, NiagaraScript_1943_Func_Output_LocalToWorld, Context);
	float3 Result87 = mul(float4(In_InVector,0.0),NiagaraScript_1943_Func_Output_OutTransform).xyz;
	float3 Vector_IfResult;
	if(NiagaraScript_1943_Func_Output_bUseOriginal)
	{
	Vector_IfResult = In_InVector;
	}
	else
	{
	Vector_IfResult = Result87;
	}
	Out_OutVector = Vector_IfResult;
}

void AddVelocity_TransformStack_Rotation_TransformVector001_Emitter_Func_(float3 In_InVector, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutVector, inout FSimulationContext Context)
{
	bool Constant134 = true;
	float4x4 Matrix_IfResult2;
	float4x4 Matrix001_IfResult1;
	if(In_ApplyScale)
	{
	Matrix_IfResult2 = Context.MapSpawn.Engine.Owner.SystemLocalToWorld;
	Matrix001_IfResult1 = Context.MapSpawn.Engine.Owner.SystemWorldToLocal;
	}
	else
	{
	Matrix_IfResult2 = Context.MapSpawn.Engine.Owner.SystemLocalToWorldNoScale;
	Matrix001_IfResult1 = Context.MapSpawn.Engine.Owner.SystemWorldToLocalNoScale;
	}
	bool NiagaraScript_1943_Func_Output_bUseOriginal1;
	float4x4 NiagaraScript_1943_Func_Output_OutTransform1;
	bool NiagaraScript_1943_Func_Output_LocalToWorld1;
	NiagaraScript_1943_Func_(In_SourceSpace, In_DestinationSpace, Matrix_IfResult2, Matrix001_IfResult1, Constant134, NiagaraScript_1943_Func_Output_bUseOriginal1, NiagaraScript_1943_Func_Output_OutTransform1, NiagaraScript_1943_Func_Output_LocalToWorld1, Context);
	float3 Result88 = mul(float4(In_InVector,0.0),NiagaraScript_1943_Func_Output_OutTransform1).xyz;
	float3 Vector_IfResult1;
	if(NiagaraScript_1943_Func_Output_bUseOriginal1)
	{
	Vector_IfResult1 = In_InVector;
	}
	else
	{
	Vector_IfResult1 = Result88;
	}
	Out_OutVector = Vector_IfResult1;
}

void AddVelocity_TransformStack_Rotation_TransformVector003_Emitter_Func_(float3 In_InVector, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutVector, inout FSimulationContext Context)
{
	bool Constant137 = true;
	float4x4 Matrix_IfResult3;
	float4x4 Matrix001_IfResult2;
	if(In_ApplyScale)
	{
	Matrix_IfResult3 = Context.MapSpawn.Engine.Owner.SystemLocalToWorld;
	Matrix001_IfResult2 = Context.MapSpawn.Engine.Owner.SystemWorldToLocal;
	}
	else
	{
	Matrix_IfResult3 = Context.MapSpawn.Engine.Owner.SystemLocalToWorldNoScale;
	Matrix001_IfResult2 = Context.MapSpawn.Engine.Owner.SystemWorldToLocalNoScale;
	}
	bool NiagaraScript_1943_Func_Output_bUseOriginal2;
	float4x4 NiagaraScript_1943_Func_Output_OutTransform2;
	bool NiagaraScript_1943_Func_Output_LocalToWorld2;
	NiagaraScript_1943_Func_(In_SourceSpace, In_DestinationSpace, Matrix_IfResult3, Matrix001_IfResult2, Constant137, NiagaraScript_1943_Func_Output_bUseOriginal2, NiagaraScript_1943_Func_Output_OutTransform2, NiagaraScript_1943_Func_Output_LocalToWorld2, Context);
	float3 Result89 = mul(float4(In_InVector,0.0),NiagaraScript_1943_Func_Output_OutTransform2).xyz;
	float3 Vector_IfResult2;
	if(NiagaraScript_1943_Func_Output_bUseOriginal2)
	{
	Vector_IfResult2 = In_InVector;
	}
	else
	{
	Vector_IfResult2 = Result89;
	}
	Out_OutVector = Vector_IfResult2;
}

void AddVelocity_TransformStack_Rotation_TransformVector004_Emitter_Func_(float3 In_InVector, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutVector, inout FSimulationContext Context)
{
	bool Constant140 = true;
	float4x4 Matrix_IfResult4;
	float4x4 Matrix001_IfResult3;
	if(In_ApplyScale)
	{
	Matrix_IfResult4 = Context.MapSpawn.Engine.Owner.SystemLocalToWorld;
	Matrix001_IfResult3 = Context.MapSpawn.Engine.Owner.SystemWorldToLocal;
	}
	else
	{
	Matrix_IfResult4 = Context.MapSpawn.Engine.Owner.SystemLocalToWorldNoScale;
	Matrix001_IfResult3 = Context.MapSpawn.Engine.Owner.SystemWorldToLocalNoScale;
	}
	bool NiagaraScript_1943_Func_Output_bUseOriginal3;
	float4x4 NiagaraScript_1943_Func_Output_OutTransform3;
	bool NiagaraScript_1943_Func_Output_LocalToWorld3;
	NiagaraScript_1943_Func_(In_SourceSpace, In_DestinationSpace, Matrix_IfResult4, Matrix001_IfResult3, Constant140, NiagaraScript_1943_Func_Output_bUseOriginal3, NiagaraScript_1943_Func_Output_OutTransform3, NiagaraScript_1943_Func_Output_LocalToWorld3, Context);
	float3 Result90 = mul(float4(In_InVector,0.0),NiagaraScript_1943_Func_Output_OutTransform3).xyz;
	float3 Vector_IfResult3;
	if(NiagaraScript_1943_Func_Output_bUseOriginal3)
	{
	Vector_IfResult3 = In_InVector;
	}
	else
	{
	Vector_IfResult3 = Result90;
	}
	Out_OutVector = Vector_IfResult3;
}

void AddVelocity_TransformStack_Rotation_Emitter_Func_(float3 In_InputVector, int In_RotationCoordinateSpace, float3 In_YawASC47PitchASC47Roll, float3 In_RotationAxis, float In_RotationAngle, float4 In_RotationQuaternion, bool In_InvertRotationQuaternion, float3 In_AdditionalYawASC47PitchASC47Roll, float4x4 In_RotationMatrix, float3 In_InputNormal, float3 In_InputTangent, float3 In_InputBitangent, out float3 Out_TransformedVector, out float3 Out_TransformedNormal, out float3 Out_TransformedTangent, out float3 Out_TransformedBitangent, inout FSimulationContext Context)
{
	Context.MapSpawn.Local.AddVelocity.TransformStack_Rotation.LocalTransformVector = In_InputVector;
	Context.MapSpawn.Local.AddVelocity.TransformStack_Rotation.LocalTransformNormal = In_InputNormal;
	Context.MapSpawn.Local.AddVelocity.TransformStack_Rotation.LocalTransformTangent = In_InputTangent;
	Context.MapSpawn.Local.AddVelocity.TransformStack_Rotation.LocalTransformBitangent = In_InputBitangent;
	int Constant123 = 0;
	bool Constant124 = false;
	float3 AddVelocity_TransformStack_Rotation_TransformVector002_Emitter_Func_Output_OutVector;
	AddVelocity_TransformStack_Rotation_TransformVector002_Emitter_Func_(Context.MapSpawn.Local.AddVelocity.TransformStack_Rotation.LocalTransformVector, In_RotationCoordinateSpace, Constant123, Constant124, AddVelocity_TransformStack_Rotation_TransformVector002_Emitter_Func_Output_OutVector, Context);
	int Constant132 = 0;
	bool Constant133 = false;
	float3 AddVelocity_TransformStack_Rotation_TransformVector001_Emitter_Func_Output_OutVector;
	AddVelocity_TransformStack_Rotation_TransformVector001_Emitter_Func_(Context.MapSpawn.Local.AddVelocity.TransformStack_Rotation.LocalTransformNormal, In_RotationCoordinateSpace, Constant132, Constant133, AddVelocity_TransformStack_Rotation_TransformVector001_Emitter_Func_Output_OutVector, Context);
	int Constant135 = 0;
	bool Constant136 = false;
	float3 AddVelocity_TransformStack_Rotation_TransformVector003_Emitter_Func_Output_OutVector;
	AddVelocity_TransformStack_Rotation_TransformVector003_Emitter_Func_(Context.MapSpawn.Local.AddVelocity.TransformStack_Rotation.LocalTransformTangent, In_RotationCoordinateSpace, Constant135, Constant136, AddVelocity_TransformStack_Rotation_TransformVector003_Emitter_Func_Output_OutVector, Context);
	int Constant138 = 0;
	bool Constant139 = false;
	float3 AddVelocity_TransformStack_Rotation_TransformVector004_Emitter_Func_Output_OutVector;
	AddVelocity_TransformStack_Rotation_TransformVector004_Emitter_Func_(Context.MapSpawn.Local.AddVelocity.TransformStack_Rotation.LocalTransformBitangent, In_RotationCoordinateSpace, Constant138, Constant139, AddVelocity_TransformStack_Rotation_TransformVector004_Emitter_Func_Output_OutVector, Context);
	Context.MapSpawn.Local.AddVelocity.TransformStack_Rotation.LocalTransformVector = AddVelocity_TransformStack_Rotation_TransformVector002_Emitter_Func_Output_OutVector;
	Context.MapSpawn.Local.AddVelocity.TransformStack_Rotation.LocalTransformNormal = AddVelocity_TransformStack_Rotation_TransformVector001_Emitter_Func_Output_OutVector;
	Context.MapSpawn.Local.AddVelocity.TransformStack_Rotation.LocalTransformTangent = AddVelocity_TransformStack_Rotation_TransformVector003_Emitter_Func_Output_OutVector;
	Context.MapSpawn.Local.AddVelocity.TransformStack_Rotation.LocalTransformBitangent = AddVelocity_TransformStack_Rotation_TransformVector004_Emitter_Func_Output_OutVector;
	Out_TransformedVector = Context.MapSpawn.Local.AddVelocity.TransformStack_Rotation.LocalTransformVector;
	Out_TransformedNormal = Context.MapSpawn.Local.AddVelocity.TransformStack_Rotation.LocalTransformNormal;
	Out_TransformedTangent = Context.MapSpawn.Local.AddVelocity.TransformStack_Rotation.LocalTransformTangent;
	Out_TransformedBitangent = Context.MapSpawn.Local.AddVelocity.TransformStack_Rotation.LocalTransformBitangent;
}

void AddVelocity_Emitter_Func_(inout FSimulationContext Context)
{
	int Constant57 = (0);
	float Constant58 = 1;
	float Constant59 = -0.5;
	float NiagaraScript_1940_Func_Output_ClampedValue;
	NiagaraScript_1940_Func_(Constants_Emitter_AddVelocity_DistributionAlongConeAxis, NiagaraScript_1940_Func_Output_ClampedValue, Context);
	float Result6 = lerp(Constant58,Constant59,NiagaraScript_1940_Func_Output_ClampedValue);
	float Constant62 = 1;
	int Constant63 = -1;
	int Constant64 = (0);
	int Constant65 = 0;
	int Constant66 = (0);
	int Constant67 = (0);
	float NiagaraScript_1936_ScriptUsage4_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_Output_RandomFloat4;
	bool NiagaraScript_1936_ScriptUsage4_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_Output_IsDeterministic4;
	NiagaraScript_1936_ScriptUsage4_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_(Constant57, Result6, Constant62, Constant63, Constant64, Constant65, Constant66, Constant67, NiagaraScript_1936_ScriptUsage4_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_Output_RandomFloat4, NiagaraScript_1936_ScriptUsage4_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_Output_IsDeterministic4, Context);
	float NiagaraScript_1940_Func_Output_ClampedValue1;
	NiagaraScript_1940_Func_(NiagaraScript_1936_ScriptUsage4_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_Output_RandomFloat4, NiagaraScript_1940_Func_Output_ClampedValue1, Context);
	float Result7 = Constants_Emitter_AddVelocity_ConeAngle * NiagaraScript_1940_Func_Output_ClampedValue1;
	float Constant68 = (0.0);
	float NiagaraFloat_SelectResult1 = Constant68;
	NiagaraFloat_SelectResult1 = Result7;
	if(Context.MapSpawn.AddVelocity.UseVelDistribution == 0)
	{ 
	NiagaraFloat_SelectResult1 = Constants_Emitter_AddVelocity_ConeAngle;
	}
	float Constant69 = 1;
	float Constant70 = 360;
	float3 Constant71 = float3(1,0,0);
	float Constant72 = 1e-05;
	float3 NiagaraScript_1939_Func_Output_Direction;
	float NiagaraScript_1939_Func_Output_Length;
	bool NiagaraScript_1939_Func_Output_BelowThreshold;
	NiagaraScript_1939_Func_(Constants_Emitter_AddVelocity_ConeAxis, Constant71, Constant72, NiagaraScript_1939_Func_Output_Direction, NiagaraScript_1939_Func_Output_Length, NiagaraScript_1939_Func_Output_BelowThreshold, Context);
	float3 NiagaraScript_1934_AngleInput_NewEnumerator0_EnableConeAxisRotation_true_EnableFlattenedEndcaps_false_EnableRandomPosition_true_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_Output_ConeVector;
	float3 NiagaraScript_1934_AngleInput_NewEnumerator0_EnableConeAxisRotation_true_EnableFlattenedEndcaps_false_EnableRandomPosition_true_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_Output_ConeNormal;
	float3 NiagaraScript_1934_AngleInput_NewEnumerator0_EnableConeAxisRotation_true_EnableFlattenedEndcaps_false_EnableRandomPosition_true_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_Output_ConeTangent;
	NiagaraScript_1934_AngleInput_NewEnumerator0_EnableConeAxisRotation_true_EnableFlattenedEndcaps_false_EnableRandomPosition_true_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_(NiagaraFloat_SelectResult1, Context.MapSpawn.AddVelocity.VelocitySpeed, Constant69, Constant70, Constants_Emitter_AddVelocity_RandomSeed, NiagaraScript_1939_Func_Output_Direction, Constants_Emitter_AddVelocity_InnerConeAngle, NiagaraScript_1934_AngleInput_NewEnumerator0_EnableConeAxisRotation_true_EnableFlattenedEndcaps_false_EnableRandomPosition_true_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_Output_ConeVector, NiagaraScript_1934_AngleInput_NewEnumerator0_EnableConeAxisRotation_true_EnableFlattenedEndcaps_false_EnableRandomPosition_true_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_Output_ConeNormal, NiagaraScript_1934_AngleInput_NewEnumerator0_EnableConeAxisRotation_true_EnableFlattenedEndcaps_false_EnableRandomPosition_true_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_Output_ConeTangent, Context);
	float Constant117 = 1;
	float Result55 = dot(NiagaraScript_1934_AngleInput_NewEnumerator0_EnableConeAxisRotation_true_EnableFlattenedEndcaps_false_EnableRandomPosition_true_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_Output_ConeNormal,NiagaraScript_1939_Func_Output_Direction);
	float NiagaraScript_1940_Func_Output_ClampedValue2;
	NiagaraScript_1940_Func_(Result55, NiagaraScript_1940_Func_Output_ClampedValue2, Context);
	float NiagaraScript_1940_Func_Output_ClampedValue3;
	NiagaraScript_1940_Func_(Constants_Emitter_AddVelocity_SpeedFalloffFromConeAxis, NiagaraScript_1940_Func_Output_ClampedValue3, Context);
	float Constant118 = 10;
	float Result56 = NiagaraScript_1940_Func_Output_ClampedValue3 * Constant118;
	float Result57 = pow(max(0, NiagaraScript_1940_Func_Output_ClampedValue2),Result56);
	float Result58 = lerp(Constant117,Result57,NiagaraScript_1940_Func_Output_ClampedValue3);
	float3 Result59 = NiagaraScript_1934_AngleInput_NewEnumerator0_EnableConeAxisRotation_true_EnableFlattenedEndcaps_false_EnableRandomPosition_true_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_Output_ConeVector * Result58;
	float3 Constant119 = float3(0.0, 0.0, 0.0);
	float3 Vector3f_SelectResult4 = Constant119;
	Vector3f_SelectResult4 = Result59;
	if(Context.MapSpawn.AddVelocity.UseConeFalloff == 0)
	{ 
	Vector3f_SelectResult4 = NiagaraScript_1934_AngleInput_NewEnumerator0_EnableConeAxisRotation_true_EnableFlattenedEndcaps_false_EnableRandomPosition_true_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_Output_ConeVector;
	}
	Context.MapSpawn.Local.AddVelocity.TransformedVector = Vector3f_SelectResult4;
	Context.MapSpawn.OUTPUT_VAR.AddVelocity.ConeAxis = NiagaraScript_1939_Func_Output_Direction;
	float3 Constant120 = float3(0,0,0);
	float3 Constant121 = float3(0,0,0);
	float3 Constant122 = float3(0,0,0);
	float3 AddVelocity_TransformStack_Rotation_Emitter_Func_Output_TransformedVector;
	float3 AddVelocity_TransformStack_Rotation_Emitter_Func_Output_TransformedNormal;
	float3 AddVelocity_TransformStack_Rotation_Emitter_Func_Output_TransformedTangent;
	float3 AddVelocity_TransformStack_Rotation_Emitter_Func_Output_TransformedBitangent;
	AddVelocity_TransformStack_Rotation_Emitter_Func_(Context.MapSpawn.Local.AddVelocity.TransformedVector, Context.MapSpawn.AddVelocity.RotationCoordinateSpace, Constants_Emitter_AddVelocity_YawASC47PitchASC47Roll, Constants_Emitter_AddVelocity_RotationAxis, Constants_Emitter_AddVelocity_RotationAngle, Constants_Emitter_AddVelocity_RotationQuaternion, Context.MapSpawn.AddVelocity.InvertRotationQuaternion, Constants_Emitter_AddVelocity_AdditionalYawASC47PitchASC47Roll, Context.MapSpawn.AddVelocity.RotationMatrix, Constant120, Constant121, Constant122, AddVelocity_TransformStack_Rotation_Emitter_Func_Output_TransformedVector, AddVelocity_TransformStack_Rotation_Emitter_Func_Output_TransformedNormal, AddVelocity_TransformStack_Rotation_Emitter_Func_Output_TransformedTangent, AddVelocity_TransformStack_Rotation_Emitter_Func_Output_TransformedBitangent, Context);
	Context.MapSpawn.Local.AddVelocity.TransformedVector = AddVelocity_TransformStack_Rotation_Emitter_Func_Output_TransformedVector;
	float3 Result91 = Context.MapSpawn.Local.AddVelocity.TransformedVector + Context.MapSpawn.Particles.Velocity;
	Context.MapSpawn.Particles.Velocity = Result91;
}

void ApplyInitialForces_Emitter_Func_(inout FSimulationContext Context)
{
	Context.MapSpawn.Local.ApplyInitialForces.PhysicsForce = Context.MapSpawn.Transient.PhysicsForce;
	Context.MapSpawn.Local.ApplyInitialForces.PhysicsRotationalForce = Context.MapSpawn.Transient.PhysicsRotationalForce;
	float Constant146 = 1e-06;
	float Result92 = max(Context.MapSpawn.Particles.Mass, Constant146);
	float3 Result93 = Context.MapSpawn.Transient.PhysicsForce / Result92;
	float3 Result94 = Result93 + Context.MapSpawn.Particles.Velocity;
	float3 Constant147 = float3(0.0, 0.0, 0.0);
	float3 Vector3f_SelectResult5 = Constant147;
	Vector3f_SelectResult5 = Result94;
	if(Context.MapSpawn.ApplyInitialForces.ApplyForcetoVelocity == 0)
	{ 
	Vector3f_SelectResult5 = Context.MapSpawn.Particles.Velocity;
	}
	Context.MapSpawn.Particles.Velocity = Vector3f_SelectResult5;
	float Constant148 = 1e-06;
	float Result95 = max(Context.MapSpawn.Particles.RotationalInertia, Constant148);
	float3 Result96 = Context.MapSpawn.Transient.PhysicsRotationalForce / Result95;
	float3 Result97 = Context.MapSpawn.Particles.RotationalVelocity + Result96;
	float3 Constant149 = float3(0.0, 0.0, 0.0);
	float3 Vector3f_SelectResult6 = Constant149;
	Vector3f_SelectResult6 = Result97;
	if(Context.MapSpawn.ApplyInitialForces.ApplyRotationalForcetoRotationalVelocity == 0)
	{ 
	Vector3f_SelectResult6 = Context.MapSpawn.Particles.RotationalVelocity;
	}
	Context.MapSpawn.Particles.RotationalVelocity = Vector3f_SelectResult6;
	float3 Result98 = Context.MapSpawn.Local.ApplyInitialForces.PhysicsForce * Constants_Emitter_ApplyInitialForces_PositionalForceWarmupTime;
	float3 Result99 = Context.MapSpawn.Particles.Position + Result98;
	float3 Constant150 = float3(0.0, 0.0, 0.0);
	float3 NiagaraPosition_SelectResult7 = Constant150;
	NiagaraPosition_SelectResult7 = Result99;
	if(Context.MapSpawn.ApplyInitialForces.ApplyForcetoPosition == 0)
	{ 
	NiagaraPosition_SelectResult7 = Context.MapSpawn.Particles.Position;
	}
	Context.MapSpawn.Particles.Position = NiagaraPosition_SelectResult7;
	bool Result100 = Context.MapSpawn.ApplyInitialForces.ApplyForcetoVelocity || Context.MapSpawn.ApplyInitialForces.ApplyForcetoPosition;
	float3 Constant151 = float3(0,0,0);
	float3 Constant152 = float3(0.0, 0.0, 0.0);
	float3 Force_SelectResult8 = Constant152;
	Force_SelectResult8 = Constant151;
	if(Result100 == 0)
	{ 
	Force_SelectResult8 = Context.MapSpawn.Local.ApplyInitialForces.PhysicsForce;
	}
	float3 Constant153 = float3(0,0,0);
	float3 Constant154 = float3(0.0, 0.0, 0.0);
	float3 RotationalForce_SelectResult9 = Constant154;
	RotationalForce_SelectResult9 = Constant153;
	if(Context.MapSpawn.ApplyInitialForces.ApplyRotationalForcetoRotationalVelocity == 0)
	{ 
	RotationalForce_SelectResult9 = Context.MapSpawn.Local.ApplyInitialForces.PhysicsRotationalForce;
	}
	Context.MapSpawn.Transient.PhysicsForce = Force_SelectResult8;
	Context.MapSpawn.Transient.PhysicsRotationalForce = RotationalForce_SelectResult9;
	Context.MapSpawn.OUTPUT_VAR.ApplyInitialForces.IncomingPhysicsForce = Context.MapSpawn.Local.ApplyInitialForces.PhysicsForce;
	Context.MapSpawn.OUTPUT_VAR.ApplyInitialForces.IncomingPhysicsRotationalForce = Context.MapSpawn.Local.ApplyInitialForces.PhysicsRotationalForce;
}

void ParticleState_Emitter_Func_(inout FSimulationContext Context)
{
	bool Result101 = NiagaraAll(Context.MapUpdate.Particles.Age <= Context.MapUpdate.Engine.DeltaTime);
	Context.MapUpdate.OUTPUT_VAR.ParticleState.FirstFrame = Result101;
	Context.MapUpdate.Transient.FirstFrame = Result101;
	float Constant156 = 1e-06;
	bool Result102 = NiagaraAll(Context.MapUpdate.ParticleState.Lifetime > Constant156);
	bool Result103 = Context.MapUpdate.Transient.FirstFrame && Result102;
	float Result104 = Context.MapUpdate.Particles.Age + Context.MapUpdate.ParticleState.DeltaTime;
	float Constant157 = 1e-05;
	float Result105 = max(Context.MapUpdate.ParticleState.Lifetime, Constant157);
	bool Result106 = NiagaraAll(Result104 < Result105);
	bool Result107 = Result103 || Result106;
	bool Result108 = Context.MapUpdate.DataInstance.Alive && Result107;
	float Result109 = Result104 / Result105;
	float NiagaraScript_1940_Func_Output_ClampedValue4;
	NiagaraScript_1940_Func_(Result109, NiagaraScript_1940_Func_Output_ClampedValue4, Context);
	Context.MapUpdate.DataInstance.Alive = Result108;
	Context.MapUpdate.Particles.Age = Result104;
	Context.MapUpdate.Particles.NormalizedAge = NiagaraScript_1940_Func_Output_ClampedValue4;
	bool Constant158 = false;
	bool Constant159 = true;
}

void ScaleSpriteSize_Emitter_Func_(inout FSimulationContext Context)
{
	Context.MapUpdate.Local.ScaleSpriteSize.InitialSpriteSize = Context.MapUpdate.ScaleSpriteSize.InitialSpriteSize;
	float SampleCurve_Emitter_ScaleSpriteSize_UniformCurveSpriteScaleOutput_Value;
	SampleCurve_Emitter_ScaleSpriteSize_UniformCurveSpriteScale(Context.MapUpdate.ScaleSpriteSize.UniformCurveIndex, SampleCurve_Emitter_ScaleSpriteSize_UniformCurveSpriteScaleOutput_Value);
	float Result110 = SampleCurve_Emitter_ScaleSpriteSize_UniformCurveSpriteScaleOutput_Value * Constants_Emitter_ScaleSpriteSize_UniformCurveScale;
	float2 Result111 = Context.MapUpdate.Transient.SpriteSizeScaleFactor * Result110;
	float2 Result112 = Context.MapUpdate.Local.ScaleSpriteSize.InitialSpriteSize * Result111;
	Context.MapUpdate.Particles.SpriteSize = Result112;
	Context.MapUpdate.Transient.SpriteSizeScaleFactor = Result111;
}

void GravityForce_NF_TransformVector_Emitter_Func_(float3 In_InVector, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutVector, inout FSimulationContext Context)
{
	bool Constant166 = true;
	float4x4 Matrix_IfResult5;
	float4x4 Matrix001_IfResult4;
	if(In_ApplyScale)
	{
	Matrix_IfResult5 = Context.MapUpdate.Engine.Owner.SystemLocalToWorld;
	Matrix001_IfResult4 = Context.MapUpdate.Engine.Owner.SystemWorldToLocal;
	}
	else
	{
	Matrix_IfResult5 = Context.MapUpdate.Engine.Owner.SystemLocalToWorldNoScale;
	Matrix001_IfResult4 = Context.MapUpdate.Engine.Owner.SystemWorldToLocalNoScale;
	}
	bool NiagaraScript_1943_Func_Output_bUseOriginal4;
	float4x4 NiagaraScript_1943_Func_Output_OutTransform4;
	bool NiagaraScript_1943_Func_Output_LocalToWorld4;
	NiagaraScript_1943_Func_(In_SourceSpace, In_DestinationSpace, Matrix_IfResult5, Matrix001_IfResult4, Constant166, NiagaraScript_1943_Func_Output_bUseOriginal4, NiagaraScript_1943_Func_Output_OutTransform4, NiagaraScript_1943_Func_Output_LocalToWorld4, Context);
	float3 Result114 = mul(float4(In_InVector,0.0),NiagaraScript_1943_Func_Output_OutTransform4).xyz;
	float3 Vector_IfResult4;
	if(NiagaraScript_1943_Func_Output_bUseOriginal4)
	{
	Vector_IfResult4 = In_InVector;
	}
	else
	{
	Vector_IfResult4 = Result114;
	}
	Out_OutVector = Vector_IfResult4;
}

void GravityForce_Emitter_Func_(inout FSimulationContext Context)
{
	float3 Result113 = Constants_Emitter_GravityForce_Gravity * Context.MapUpdate.Particles.Mass;
	int Constant163 = 1;
	int Constant164 = 0;
	bool Constant165 = false;
	float3 GravityForce_NF_TransformVector_Emitter_Func_Output_OutVector;
	GravityForce_NF_TransformVector_Emitter_Func_(Result113, Constant163, Constant164, Constant165, GravityForce_NF_TransformVector_Emitter_Func_Output_OutVector, Context);
	float3 Result115 = Context.MapUpdate.Transient.PhysicsForce + GravityForce_NF_TransformVector_Emitter_Func_Output_OutVector;
	Context.MapUpdate.Transient.PhysicsForce = Result115;
}

void NiagaraScript_1936_ScriptUsage5_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_(int In_Engine_System_RandomSeed, float In_FloatMin, float In_FloatMax, int In_Seed, int In_Engine_System_TickCount, int In_Particles_UniqueID, int In_Emitter_RandomSeed, int In_Engine_Emitter_InstanceSeed, out float Out_RandomFloat, out bool Out_IsDeterministic, inout FSimulationContext Context)
{
	bool Constant172 = false;
	float Result116 = In_FloatMax - In_FloatMin;
	int Constant173 = 882693397;
	float Result117 = rand_float(Result116, Context.MapUpdate.Particles.UniqueID, Constant173, Context.MapUpdate.Engine.Emitter.InstanceSeed);
	float Result118 = In_FloatMin + Result117;
	Out_RandomFloat = Result118;
	Out_IsDeterministic = Constant172;
}

void RandomRangeFloat002_Emitter_Func_(out float Out_UniformRangedFloat, inout FSimulationContext Context)
{
	int Constant167 = (0);
	int Constant168 = (0);
	int Constant169 = 0;
	int Constant170 = (0);
	int Constant171 = (0);
	float NiagaraScript_1936_ScriptUsage5_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_Output_RandomFloat;
	bool NiagaraScript_1936_ScriptUsage5_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_Output_IsDeterministic;
	NiagaraScript_1936_ScriptUsage5_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_(Constant167, Constants_Emitter_RandomRangeFloat002_Minimum, Constants_Emitter_RandomRangeFloat002_Maximum, Constants_Emitter_RandomRangeFloat002_RandomSeed, Constant168, Constant169, Constant170, Constant171, NiagaraScript_1936_ScriptUsage5_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_Output_RandomFloat, NiagaraScript_1936_ScriptUsage5_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_Output_IsDeterministic, Context);
	Out_UniformRangedFloat = NiagaraScript_1936_ScriptUsage5_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_Output_RandomFloat;
}

void RandomRangeFloat001_Emitter_Func_(out float Out_UniformRangedFloat, inout FSimulationContext Context)
{
	int Constant174 = (0);
	int Constant175 = (0);
	int Constant176 = 0;
	int Constant177 = (0);
	int Constant178 = (0);
	float NiagaraScript_1936_ScriptUsage5_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_Output_RandomFloat1;
	bool NiagaraScript_1936_ScriptUsage5_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_Output_IsDeterministic1;
	NiagaraScript_1936_ScriptUsage5_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_(Constant174, Constants_Emitter_RandomRangeFloat001_Minimum, Constants_Emitter_RandomRangeFloat001_Maximum, Constants_Emitter_RandomRangeFloat001_RandomSeed, Constant175, Constant176, Constant177, Constant178, NiagaraScript_1936_ScriptUsage5_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_Output_RandomFloat1, NiagaraScript_1936_ScriptUsage5_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_Output_IsDeterministic1, Context);
	Out_UniformRangedFloat = NiagaraScript_1936_ScriptUsage5_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_Output_RandomFloat1;
}

void FloatFromCurve_Emitter_Func_(out float Out_Value, inout FSimulationContext Context)
{
	float SampleCurve_Emitter_FloatFromCurve_FloatCurveOutput_Value;
	SampleCurve_Emitter_FloatFromCurve_FloatCurve(Context.MapUpdate.FloatFromCurve.CurveIndex, SampleCurve_Emitter_FloatFromCurve_FloatCurveOutput_Value);
	float Result119 = SampleCurve_Emitter_FloatFromCurve_FloatCurveOutput_Value * Context.MapUpdate.FloatFromCurve.ScaleCurve;
	Out_Value = Result119;
}

void CustomHlslB74F9E504381758A16BB98A1135669A9_Func_(out float Out_CustomHLSLOutput, inout FSimulationContext Context)
{

Out_CustomHLSLOutput = (float)(dot();
	
}

void FloatFromCurve001_Emitter_Func_(out float Out_Value, inout FSimulationContext Context)
{
	float SampleCurve_Emitter_FloatFromCurve001_FloatCurveOutput_Value;
	SampleCurve_Emitter_FloatFromCurve001_FloatCurve(Context.MapUpdate.FloatFromCurve001.CurveIndex, SampleCurve_Emitter_FloatFromCurve001_FloatCurveOutput_Value);
	float Result120 = SampleCurve_Emitter_FloatFromCurve001_FloatCurveOutput_Value * Context.MapUpdate.FloatFromCurve001.ScaleCurve;
	Out_Value = Result120;
}

void Multiply_Float_Emitter_Func_(out float Out_Result, inout FSimulationContext Context)
{
	float Result121 = Context.MapUpdate.Multiply_Float.A * Context.MapUpdate.Multiply_Float.B;
	Out_Result = Result121;
}

void Drag_Emitter_Func_(inout FSimulationContext Context)
{
	float Result122 = Context.MapUpdate.Drag.Drag + Context.MapUpdate.Transient.PhysicsDrag;
	Context.MapUpdate.Transient.PhysicsDrag = Result122;
	float Constant182 = 0.01;
	float Result123 = Context.MapUpdate.Transient.PhysicsRotationalDrag * Constant182;
	Context.MapUpdate.Transient.PhysicsRotationalDrag = Result123;
	Context.MapUpdate.Transient.DragIgnoreMass = Context.MapUpdate.Drag.IgnoreMass;
}

void NiagaraScript_1971_Func_(float3 In_Velocity, float3 In_AdvectionVelocity, float In_InverseMass, float In_Drag, float In_DeltaTime, bool In_IgnoreMass, out float3 Out_Output, inout FSimulationContext Context)
{
	float3 Result130 = In_Velocity - In_AdvectionVelocity;
	float Result131 = In_Drag * In_InverseMass;
	float Constant188 = (0.0);
	float NiagaraFloat_SelectResult10 = Constant188;
	NiagaraFloat_SelectResult10 = In_Drag;
	if(In_IgnoreMass == 0)
	{ 
	NiagaraFloat_SelectResult10 = Result131;
	}
	float Constant189 = 0;
	float Result132 = max(NiagaraFloat_SelectResult10, Constant189);
	float Result133 = Result132 * In_DeltaTime;
	float Constant190 = 1;
	float Result134 = Result133 + Constant190;
	float3 Result135 = Result130 / Result134;
	float3 Result136 = Result135 + In_AdvectionVelocity;
	Out_Output = Result136;
}

void SolveForcesAndVelocity_Emitter_Func_(inout FSimulationContext Context)
{
	Context.MapUpdate.Local.SolveForcesAndVelocity.DeltaTime = Context.MapUpdate.SolveForcesAndVelocity.DeltaTime;
	float Constant186 = 1e-05;
	float Result124 = max(Context.MapUpdate.Local.SolveForcesAndVelocity.DeltaTime, Constant186);
	float Result125 = Reciprocal(Result124);
	Context.MapUpdate.Local.SolveForcesAndVelocity.InverseDeltaTime = Result125;
	Context.MapUpdate.Local.SolveForcesAndVelocity.PhysicsForce = Context.MapUpdate.SolveForcesAndVelocity.Force;
	Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.IncomingPhysicsForce = Context.MapUpdate.SolveForcesAndVelocity.Force;
	Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity = Context.MapUpdate.SolveForcesAndVelocity.Velocity;
	Context.MapUpdate.Local.SolveForcesAndVelocity.Mass = Context.MapUpdate.SolveForcesAndVelocity.Mass;
	Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Position = Context.MapUpdate.SolveForcesAndVelocity.Position;
	Context.MapUpdate.Particles.Presolve.Velocity = Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity;
	Context.MapUpdate.Particles.Presolve.Position = Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Position;
	Context.MapUpdate.Particles.Presolve.PhysicsForce = Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.IncomingPhysicsForce;
	float Constant187 = 1e-06;
	float Result126 = max(Context.MapUpdate.Local.SolveForcesAndVelocity.Mass, Constant187);
	float Result127 = Reciprocal(Result126);
	float3 Result128 = Result127 * Context.MapUpdate.Local.SolveForcesAndVelocity.PhysicsForce;
	Context.MapUpdate.Local.SolveForcesAndVelocity.PhysicsForce = Result128;
	Context.MapUpdate.Local.SolveForcesAndVelocity.InverseMass = Result127;
	float3 Result129 = Context.MapUpdate.Local.SolveForcesAndVelocity.PhysicsForce * Context.MapUpdate.Local.SolveForcesAndVelocity.DeltaTime + Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity;
	Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity = Result129;
	Context.MapUpdate.Local.SolveForcesAndVelocity.AdvectionVelocity = Context.MapUpdate.Transient.AdvectionVelocity;
	Context.MapUpdate.Local.SolveForcesAndVelocity.PhysicsDrag = Context.MapUpdate.Transient.PhysicsDrag;
	Context.MapUpdate.Local.SolveForcesAndVelocity.DragIgnoreMass = Context.MapUpdate.Transient.DragIgnoreMass;
	float3 NiagaraScript_1971_Func_Output_Output;
	NiagaraScript_1971_Func_(Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity, Context.MapUpdate.Local.SolveForcesAndVelocity.AdvectionVelocity, Context.MapUpdate.Local.SolveForcesAndVelocity.InverseMass, Context.MapUpdate.Local.SolveForcesAndVelocity.PhysicsDrag, Context.MapUpdate.Local.SolveForcesAndVelocity.DeltaTime, Context.MapUpdate.Local.SolveForcesAndVelocity.DragIgnoreMass, NiagaraScript_1971_Func_Output_Output, Context);
	float3 Result137 = NiagaraScript_1971_Func_Output_Output - Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity;
	Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity = NiagaraScript_1971_Func_Output_Output;
	Context.MapUpdate.Local.SolveForcesAndVelocity.DragVelocity = Result137;
	Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.IncomingPhysicsDrag = Context.MapUpdate.Local.SolveForcesAndVelocity.PhysicsDrag;
	Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity = Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity;
	Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity = Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity;
	float3 Result138 = Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity * Context.MapUpdate.Local.SolveForcesAndVelocity.DeltaTime;
	float3 Result139 = Result138 + Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Position;
	Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Position = Result139;
	float3 Position_IfResult;
	float3 Velocity_IfResult;
	if(Context.MapUpdate.SolveForcesAndVelocity.WritetoIntrinsicProperties)
	{
	Position_IfResult = Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Position;
	Velocity_IfResult = Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity;
	}
	else
	{
	Position_IfResult = Context.MapUpdate.Particles.Position;
	Velocity_IfResult = Context.MapUpdate.Particles.Velocity;
	}
	Context.MapUpdate.Particles.Position = Position_IfResult;
	Context.MapUpdate.Particles.Velocity = Velocity_IfResult;
	float3 Constant191 = float3(0,0,0);
	float Constant192 = 0;
	float3 ForceVector_IfResult;
	float Drag_IfResult;
	if(Context.MapUpdate.SolveForcesAndVelocity.WritetoIntrinsicProperties)
	{
	ForceVector_IfResult = Constant191;
	Drag_IfResult = Constant192;
	}
	else
	{
	ForceVector_IfResult = Context.MapUpdate.Transient.PhysicsForce;
	Drag_IfResult = Context.MapUpdate.Transient.PhysicsDrag;
	}
	Context.MapUpdate.Transient.PhysicsForce = ForceVector_IfResult;
	Context.MapUpdate.Transient.PhysicsDrag = Drag_IfResult;
	float3 Result140 = Context.MapUpdate.Particles.Position - Context.MapUpdate.Particles.Previous.Position;
	float Result141 = length(Result140);
	float Constant193 = 0.3333;
	float Result142 = Result141 * Constant193;
	float Constant194 = 1e+08;
	float Result143 = Modulo(Context.MapUpdate.Particles.DistanceTraveled, Constant194);
	float Result144 = Result142 + Result143;
	Context.MapUpdate.Particles.DistanceTraveled = Result144;
	
	int Constant195 = 0;
	
	int Constant196 = 0;
	
	int Constant197 = 0;
}

float GetSpawnInterpolation()
{
	return HackSpawnInterp;
}


void InterpolateParameters(inout FSimulationContext Context)
{
	int InterpSpawn_Index = ExecIndex();
	float InterpSpawn_SpawnTime = Emitter_InterpSpawnStartDt + (Emitter_SpawnInterval * InterpSpawn_Index);
	float InterpSpawn_UpdateTime = Engine_DeltaTime - InterpSpawn_SpawnTime;
	float InterpSpawn_InvSpawnTime = 1.0 / InterpSpawn_SpawnTime;
	float InterpSpawn_InvUpdateTime = 1.0 / InterpSpawn_UpdateTime;
	float SpawnInterp = InterpSpawn_SpawnTime * Engine_InverseDeltaTime ;
	HackSpawnInterp = SpawnInterp;
	Context.MapSpawn.Interpolation.InterpSpawn_Index = InterpSpawn_Index;
	Context.MapSpawn.Interpolation.InterpSpawn_SpawnTime = InterpSpawn_SpawnTime;
	Context.MapSpawn.Interpolation.InterpSpawn_UpdateTime = InterpSpawn_UpdateTime;
	Context.MapSpawn.Interpolation.InterpSpawn_InvSpawnTime = InterpSpawn_InvSpawnTime;
	Context.MapSpawn.Interpolation.InterpSpawn_InvUpdateTime = InterpSpawn_InvUpdateTime;
	Context.MapSpawn.Interpolation.SpawnInterp = SpawnInterp;
	Context.MapSpawn.Interpolation.Emitter_SpawnInterval = Emitter_SpawnInterval;
	Context.MapSpawn.Interpolation.Emitter_InterpSpawnStartDt = Emitter_InterpSpawnStartDt;
	Context.MapSpawn.Interpolation.Emitter_SpawnGroup = Emitter_SpawnGroup;
	Context.MapSpawn.Engine.Time = lerp(PREV_Engine_Time, Engine_Time, SpawnInterp);
	Context.MapSpawn.Engine.RealTime = lerp(PREV_Engine_RealTime, Engine_RealTime, SpawnInterp);
	Context.MapSpawn.Engine.Owner.TimeSinceRendered = lerp(PREV_Engine_Owner_TimeSinceRendered, Engine_Owner_TimeSinceRendered, SpawnInterp);
	Context.MapSpawn.Engine.Owner.LODDistance = lerp(PREV_Engine_Owner_LODDistance, Engine_Owner_LODDistance, SpawnInterp);
	Context.MapSpawn.Engine.Owner.LODDistanceFraction = lerp(PREV_Engine_Owner_LODDistanceFraction, Engine_Owner_LODDistanceFraction, SpawnInterp);
	Context.MapSpawn.Engine.System.Age = lerp(PREV_Engine_System_Age, Engine_System_Age, SpawnInterp);
	Context.MapSpawn.Engine.Owner.Rotation = lerp(PREV_Engine_Owner_Rotation, Engine_Owner_Rotation, SpawnInterp);
	Context.MapSpawn.Engine.Owner.Position = lerp(PREV_Engine_Owner_Position, Engine_Owner_Position, SpawnInterp);
	Context.MapSpawn.Engine.Owner.Velocity = lerp(PREV_Engine_Owner_Velocity, Engine_Owner_Velocity, SpawnInterp);
	Context.MapSpawn.Engine.Owner.SystemXAxis = lerp(PREV_Engine_Owner_SystemXAxis, Engine_Owner_SystemXAxis, SpawnInterp);
	Context.MapSpawn.Engine.Owner.SystemYAxis = lerp(PREV_Engine_Owner_SystemYAxis, Engine_Owner_SystemYAxis, SpawnInterp);
	Context.MapSpawn.Engine.Owner.SystemZAxis = lerp(PREV_Engine_Owner_SystemZAxis, Engine_Owner_SystemZAxis, SpawnInterp);
	Context.MapSpawn.Engine.Owner.Scale = lerp(PREV_Engine_Owner_Scale, Engine_Owner_Scale, SpawnInterp);
	Context.MapSpawn.Engine.Owner.LWCTile = lerp(PREV_Engine_Owner_LWCTile, Engine_Owner_LWCTile, SpawnInterp);
	Context.MapSpawn.Emitter.Age = lerp(PREV_Emitter_Age, Emitter_Age, SpawnInterp);
	Context.MapSpawn.User.LifeRandomSparks = lerp(PREV_User_LifeRandomSparks, User_LifeRandomSparks, SpawnInterp);
	Context.MapSpawn.User.SizeRandom = lerp(PREV_User_SizeRandom, User_SizeRandom, SpawnInterp);
	Context.MapSpawn.Emitter.DistanceTraveled = lerp(PREV_Emitter_DistanceTraveled, Emitter_DistanceTraveled, SpawnInterp);
	Context.MapSpawn.User.SpeedRandomSparks = lerp(PREV_User_SpeedRandomSparks, User_SpeedRandomSparks, SpawnInterp);
	Context.MapUpdate.Engine.DeltaTime = InterpSpawn_UpdateTime;
	Context.MapUpdate.Engine.InverseDeltaTime = InterpSpawn_InvUpdateTime;
}


void HandlePreviousValuesForSpawn(inout FSimulationContext Context)
{
Context.MapSpawn.Particles.Previous.Position = Context.MapSpawn.Particles.Position;

Context.MapSpawn.Particles.Previous.SpriteSize = Context.MapSpawn.Particles.SpriteSize;

Context.MapSpawn.Particles.Previous.Velocity = Context.MapSpawn.Particles.Velocity;

}


void ReadDataSets(inout FSimulationContext Context)
{
}

void WriteDataSets(inout FSimulationContext Context)
{
}

void SimulateMapSpawn(inout FSimulationContext Context)
{
	
	
	float Constant = (0.0);
	Context.MapSpawn.Particles.MaterialRandom = Constant;
	float Constant1 = (0.0);
	Context.MapSpawn.Particles.Lifetime = Constant1;
	float Constant2 = 1;
	Context.MapSpawn.Particles.Mass = Constant2;
	float2 Constant3 = float2(0.0, 0.0);
	Context.MapSpawn.Particles.SpriteSize = Constant3;
	float3 Constant4 = float3(0.0, 0.0, 0.0);
	Context.MapSpawn.Particles.Position = Constant4;
	float3 Constant5 = float3(0,0,0);
	Context.MapSpawn.Particles.Velocity = Constant5;
	float3 Constant6 = float3(0,0,0);
	Context.MapSpawn.Particles.RotationalVelocity = Constant6;
	float Constant7 = 0;
	Context.MapSpawn.Particles.Age = Constant7;
	float Constant8 = (0.0);
	Context.MapSpawn.Particles.NormalizedAge = Constant8;
	float3 Constant9 = float3(0.0, 0.0, 0.0);
	Context.MapSpawn.Particles.Presolve.Velocity = Constant9;
	float3 Constant10 = float3(0.0, 0.0, 0.0);
	Context.MapSpawn.Particles.Presolve.Position = Constant10;
	float3 Constant11 = float3(0.0, 0.0, 0.0);
	Context.MapSpawn.Particles.Presolve.PhysicsForce = Constant11;
	float3 Constant12 = float3(0,0,0);
	Context.MapSpawn.Particles.Previous.Velocity = Constant12;
	float3 Constant13 = float3(0,0,0);
	Context.MapSpawn.Particles.Previous.Position = Constant13;
	float Constant14 = 0;
	Context.MapSpawn.Particles.DistanceTraveled = Constant14;
	
	int Constant15 = 1;
	Context.MapSpawn.MakeFloatFromVector2d004.Vector2D = Context.MapSpawn.User.LifeRandomSparks;
	Context.MapSpawn.MakeFloatFromVector2d005.Vector2D = Context.MapSpawn.User.LifeRandomSparks;
	Context.MapSpawn.MakeFloatFromVector2d005.Channel = Constant15;
	int Constant16 = 1;
	int Constant17 = 0;
	Context.MapSpawn.MakeFloatFromVector2d004.Channel = Constant17;
	float MakeFloatFromVector2d004_Emitter_Func_Output_Float;
	MakeFloatFromVector2d004_Emitter_Func_(MakeFloatFromVector2d004_Emitter_Func_Output_Float, Context);
	float MakeFloatFromVector2d005_Emitter_Func_Output_Float;
	MakeFloatFromVector2d005_Emitter_Func_(MakeFloatFromVector2d005_Emitter_Func_Output_Float, Context);
	Context.MapSpawn.MakeFloatFromVector2d002.Vector2D = Context.MapSpawn.User.SizeRandom;
	Context.MapSpawn.MakeFloatFromVector2d003.Vector2D = Context.MapSpawn.User.SizeRandom;
	Context.MapSpawn.MakeFloatFromVector2d003.Channel = Constant16;
	Context.MapSpawn.RandomRangeFloat003.Minimum = MakeFloatFromVector2d004_Emitter_Func_Output_Float;
	Context.MapSpawn.RandomRangeFloat003.Maximum = MakeFloatFromVector2d005_Emitter_Func_Output_Float;
	int Constant19 = 0;
	Context.MapSpawn.MakeFloatFromVector2d002.Channel = Constant19;
	float MakeFloatFromVector2d002_Emitter_Func_Output_Float;
	MakeFloatFromVector2d002_Emitter_Func_(MakeFloatFromVector2d002_Emitter_Func_Output_Float, Context);
	float MakeFloatFromVector2d003_Emitter_Func_Output_Float;
	MakeFloatFromVector2d003_Emitter_Func_(MakeFloatFromVector2d003_Emitter_Func_Output_Float, Context);
	float RandomRangeFloat003_Emitter_Func_Output_UniformRangedFloat;
	RandomRangeFloat003_Emitter_Func_(RandomRangeFloat003_Emitter_Func_Output_UniformRangedFloat, Context);
	Context.MapSpawn.InitializeParticle.UniformSpriteSizeMin = MakeFloatFromVector2d002_Emitter_Func_Output_Float;
	Context.MapSpawn.InitializeParticle.UniformSpriteSizeMax = MakeFloatFromVector2d003_Emitter_Func_Output_Float;
	Context.MapSpawn.InitializeParticle.Lifetime = RandomRangeFloat003_Emitter_Func_Output_UniformRangedFloat;
	int Constant26 = (0);
	float Constant27 = 0;
	float Constant28 = 1;
	int Constant29 = -1;
	int Constant30 = (0);
	int Constant31 = 0;
	int Constant32 = (0);
	int Constant33 = (0);
	float NiagaraScript_1936_ScriptUsage4_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_Output_RandomFloat1;
	bool NiagaraScript_1936_ScriptUsage4_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_Output_IsDeterministic1;
	NiagaraScript_1936_ScriptUsage4_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_(Constant26, Constant27, Constant28, Constant29, Constant30, Constant31, Constant32, Constant33, NiagaraScript_1936_ScriptUsage4_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_Output_RandomFloat1, NiagaraScript_1936_ScriptUsage4_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_Output_IsDeterministic1, Context);
	Context.MapSpawn.InitializeParticle.MaterialRandom = NiagaraScript_1936_ScriptUsage4_EvaluationType_NewEnumerator0_FixedRandomSeed_false_OverrideSeed_false_RandomnessMode_NewEnumerator0_Func_Output_RandomFloat1;
	int Constant34 = 0;
	Context.MapSpawn.InitializeParticle.PositionOffsetCoordinateSpace = Constant34;
	Context.MapSpawn.Particles.RibbonUVDistance = Context.MapSpawn.Emitter.DistanceTraveled;
	EnterStatScope(1 );
	InitializeParticle_Emitter_Func_(Context);
	ExitStatScope();
	int Constant45 = 1;
	Context.MapSpawn.MakeFloatFromVector2d006.Vector2D = Context.MapSpawn.User.SpeedRandomSparks;
	Context.MapSpawn.MakeFloatFromVector2d007.Vector2D = Context.MapSpawn.User.SpeedRandomSparks;
	Context.MapSpawn.MakeFloatFromVector2d007.Channel = Constant45;
	int Constant46 = 0;
	Context.MapSpawn.MakeFloatFromVector2d006.Channel = Constant46;
	float MakeFloatFromVector2d006_Emitter_Func_Output_Float;
	MakeFloatFromVector2d006_Emitter_Func_(MakeFloatFromVector2d006_Emitter_Func_Output_Float, Context);
	float MakeFloatFromVector2d007_Emitter_Func_Output_Float;
	MakeFloatFromVector2d007_Emitter_Func_(MakeFloatFromVector2d007_Emitter_Func_Output_Float, Context);
	Context.MapSpawn.RandomRangeFloat004.Minimum = MakeFloatFromVector2d006_Emitter_Func_Output_Float;
	Context.MapSpawn.RandomRangeFloat004.Maximum = MakeFloatFromVector2d007_Emitter_Func_Output_Float;
	float RandomRangeFloat004_Emitter_Func_Output_UniformRangedFloat;
	RandomRangeFloat004_Emitter_Func_(RandomRangeFloat004_Emitter_Func_Output_UniformRangedFloat, Context);
	bool Constant52 = false;
	bool Constant53 = true;
	Context.MapSpawn.AddVelocity.VelocitySpeed = RandomRangeFloat004_Emitter_Func_Output_UniformRangedFloat;
	Context.MapSpawn.AddVelocity.UseConeFalloff = Constant52;
	Context.MapSpawn.AddVelocity.UseVelDistribution = Constant53;
	int Constant54 = 2;
	Context.MapSpawn.AddVelocity.RotationCoordinateSpace = Constant54;
	bool Constant55 = false;
	Context.MapSpawn.AddVelocity.InvertRotationQuaternion = Constant55;
	Context.MapSpawn.AddVelocity.RotationMatrix = Context.MapSpawn.Engine.Owner.SystemLocalToWorld;
	bool Constant56 = true;
	EnterStatScope(2 );
	AddVelocity_Emitter_Func_(Context);
	ExitStatScope();
	float3 Constant141 = float3(0,0,0);
	Context.MapSpawn.Transient.PhysicsForce = Constant141;
	float3 Constant142 = float3(0,0,0);
	Context.MapSpawn.Transient.PhysicsRotationalForce = Constant142;
	bool Constant143 = true;
	Context.MapSpawn.ApplyInitialForces.ApplyForcetoVelocity = Constant143;
	Context.MapSpawn.Particles.RotationalInertia = Context.MapSpawn.Particles.Mass;
	bool Constant144 = true;
	Context.MapSpawn.ApplyInitialForces.ApplyRotationalForcetoRotationalVelocity = Constant144;
	bool Constant145 = false;
	Context.MapSpawn.ApplyInitialForces.ApplyForcetoPosition = Constant145;
	EnterStatScope(3 );
	ApplyInitialForces_Emitter_Func_(Context);
	ExitStatScope();
	


	
	HandlePreviousValuesForSpawn(Context);
	
	Context.MapSpawn.Particles.Initial.SpriteSize = Context.MapSpawn.Particles.SpriteSize;

	


}
void SimulateMapUpdate(inout FSimulationContext Context)
{
	
	RandomCounterDeterministic = 0;
	bool Constant155 = true;
	Context.MapUpdate.DataInstance.Alive = Constant155;
	Context.MapUpdate.ParticleState.DeltaTime = Context.MapUpdate.Engine.DeltaTime;
	Context.MapUpdate.ParticleState.Lifetime = Context.MapUpdate.Particles.Lifetime;
	EnterStatScope(4 );
	ParticleState_Emitter_Func_(Context);
	ExitStatScope();
	Context.MapUpdate.ScaleSpriteSize.InitialSpriteSize = Context.MapUpdate.Particles.Initial.SpriteSize;
	float2 Constant160 = float2(1,1);
	Context.MapUpdate.Transient.SpriteSizeScaleFactor = Constant160;
	Context.MapUpdate.ScaleSpriteSize.UniformCurveIndex = Context.MapUpdate.Particles.NormalizedAge;
	EnterStatScope(5 );
	ScaleSpriteSize_Emitter_Func_(Context);
	ExitStatScope();
	float3 Constant161 = float3(0,0,0);
	Context.MapUpdate.Transient.PhysicsForce = Constant161;
	bool Constant162 = true;
	EnterStatScope(6 );
	GravityForce_Emitter_Func_(Context);
	ExitStatScope();
	float RandomRangeFloat002_Emitter_Func_Output_UniformRangedFloat;
	RandomRangeFloat002_Emitter_Func_(RandomRangeFloat002_Emitter_Func_Output_UniformRangedFloat, Context);
	Context.MapUpdate.FloatFromCurve.ScaleCurve = RandomRangeFloat002_Emitter_Func_Output_UniformRangedFloat;
	float RandomRangeFloat001_Emitter_Func_Output_UniformRangedFloat;
	RandomRangeFloat001_Emitter_Func_(RandomRangeFloat001_Emitter_Func_Output_UniformRangedFloat, Context);
	Context.MapUpdate.FloatFromCurve.CurveIndex = Context.MapUpdate.Particles.NormalizedAge;
	float FloatFromCurve_Emitter_Func_Output_Value;
	FloatFromCurve_Emitter_Func_(FloatFromCurve_Emitter_Func_Output_Value, Context);
	float CustomHlslB74F9E504381758A16BB98A1135669A9_Func_Output_CustomHLSLOutput;
	CustomHlslB74F9E504381758A16BB98A1135669A9_Func_(CustomHlslB74F9E504381758A16BB98A1135669A9_Func_Output_CustomHLSLOutput, Context);
	Context.MapUpdate.FloatFromCurve001.ScaleCurve = RandomRangeFloat001_Emitter_Func_Output_UniformRangedFloat;
	Context.MapUpdate.Multiply_Float.B = FloatFromCurve_Emitter_Func_Output_Value;
	Context.MapUpdate.Multiply_Float.A = CustomHlslB74F9E504381758A16BB98A1135669A9_Func_Output_CustomHLSLOutput;
	Context.MapUpdate.FloatFromCurve001.CurveIndex = Context.MapUpdate.Particles.NormalizedAge;
	float FloatFromCurve001_Emitter_Func_Output_Value;
	FloatFromCurve001_Emitter_Func_(FloatFromCurve001_Emitter_Func_Output_Value, Context);
	float Multiply_Float_Emitter_Func_Output_Result;
	Multiply_Float_Emitter_Func_(Multiply_Float_Emitter_Func_Output_Result, Context);
	Context.MapUpdate.Drag.RotationalDrag = FloatFromCurve001_Emitter_Func_Output_Value;
	Context.MapUpdate.Drag.Drag = Multiply_Float_Emitter_Func_Output_Result;
	float Constant179 = 0;
	Context.MapUpdate.Transient.PhysicsDrag = Constant179;
	float Constant180 = 0;
	Context.MapUpdate.Transient.PhysicsRotationalDrag = Constant180;
	bool Constant181 = true;
	Context.MapUpdate.Drag.IgnoreMass = Constant181;
	EnterStatScope(7 );
	Drag_Emitter_Func_(Context);
	ExitStatScope();
	Context.MapUpdate.Transient.PhysicsDeltaTime = Context.MapUpdate.Engine.DeltaTime;
	Context.MapUpdate.SolveForcesAndVelocity.DeltaTime = Context.MapUpdate.Transient.PhysicsDeltaTime;
	Context.MapUpdate.SolveForcesAndVelocity.Force = Context.MapUpdate.Transient.PhysicsForce;
	Context.MapUpdate.SolveForcesAndVelocity.Velocity = Context.MapUpdate.Particles.Velocity;
	Context.MapUpdate.SolveForcesAndVelocity.Mass = Context.MapUpdate.Particles.Mass;
	float3 Constant183 = float3(0,0,0);
	Context.MapUpdate.SolveForcesAndVelocity.Position = Context.MapUpdate.Particles.Position;
	float3 Constant184 = float3(0,0,0);
	Context.MapUpdate.Transient.AdvectionVelocity = Constant184;
	Context.MapUpdate.SolveForcesAndVelocity.PreviousVelocity = Context.MapUpdate.Particles.Previous.Velocity;
	bool Constant185 = true;
	Context.MapUpdate.SolveForcesAndVelocity.WritetoIntrinsicProperties = Constant185;
	EnterStatScope(8 );
	SolveForcesAndVelocity_Emitter_Func_(Context);
	ExitStatScope();
	


}
void SimulateMain()
{
EnterStatScope(9 );

	FSimulationContext Context = (FSimulationContext)0;
	Context.MapSpawn.Particles.Age = 0.0f;
	Context.MapSpawn.Particles.DistanceTraveled = 0.0f;
	Context.MapSpawn.Particles.Initial.SpriteSize.x = 0.0f;
	Context.MapSpawn.Particles.Initial.SpriteSize.y = 0.0f;
	Context.MapSpawn.Particles.Lifetime = 0.0f;
	Context.MapSpawn.Particles.Mass = 0.0f;
	Context.MapSpawn.Particles.MaterialRandom = 0.0f;
	Context.MapSpawn.Particles.NormalizedAge = 0.0f;
	Context.MapSpawn.Particles.Position.x = 0.0f;
	Context.MapSpawn.Particles.Position.y = 0.0f;
	Context.MapSpawn.Particles.Position.z = 0.0f;
	Context.MapSpawn.Particles.Presolve.PhysicsForce.x = 0.0f;
	Context.MapSpawn.Particles.Presolve.PhysicsForce.y = 0.0f;
	Context.MapSpawn.Particles.Presolve.PhysicsForce.z = 0.0f;
	Context.MapSpawn.Particles.Presolve.Position.x = 0.0f;
	Context.MapSpawn.Particles.Presolve.Position.y = 0.0f;
	Context.MapSpawn.Particles.Presolve.Position.z = 0.0f;
	Context.MapSpawn.Particles.Presolve.Velocity.x = 0.0f;
	Context.MapSpawn.Particles.Presolve.Velocity.y = 0.0f;
	Context.MapSpawn.Particles.Presolve.Velocity.z = 0.0f;
	Context.MapSpawn.Particles.Previous.Position.x = 0.0f;
	Context.MapSpawn.Particles.Previous.Position.y = 0.0f;
	Context.MapSpawn.Particles.Previous.Position.z = 0.0f;
	Context.MapSpawn.Particles.Previous.SpriteSize.x = 0.0f;
	Context.MapSpawn.Particles.Previous.SpriteSize.y = 0.0f;
	Context.MapSpawn.Particles.Previous.Velocity.x = 0.0f;
	Context.MapSpawn.Particles.Previous.Velocity.y = 0.0f;
	Context.MapSpawn.Particles.Previous.Velocity.z = 0.0f;
	Context.MapSpawn.Particles.RibbonUVDistance = 0.0f;
	Context.MapSpawn.Particles.RotationalInertia = 0.0f;
	Context.MapSpawn.Particles.RotationalVelocity.x = 0.0f;
	Context.MapSpawn.Particles.RotationalVelocity.y = 0.0f;
	Context.MapSpawn.Particles.RotationalVelocity.z = 0.0f;
	Context.MapSpawn.Particles.SpriteSize.x = 0.0f;
	Context.MapSpawn.Particles.SpriteSize.y = 0.0f;
	Context.MapSpawn.Particles.UniqueID = 0;
	Context.MapSpawn.Particles.Velocity.x = 0.0f;
	Context.MapSpawn.Particles.Velocity.y = 0.0f;
	Context.MapSpawn.Particles.Velocity.z = 0.0f;
	Context.MapSpawn.Particles.UniqueID = Engine_Emitter_TotalSpawnedParticles + ExecIndex();
	Context.MapSpawn.User.LifeRandomSparks = User_LifeRandomSparks;
	Context.MapSpawn.User.SizeRandom = User_SizeRandom;
	Context.MapSpawn.Emitter.DistanceTraveled = Emitter_DistanceTraveled;
	Context.MapSpawn.User.SpeedRandomSparks = User_SpeedRandomSparks;
	Context.MapSpawn.Engine.Owner.SystemLocalToWorld = Engine_Owner_SystemLocalToWorld;
	Context.MapSpawn.Engine.Owner.SystemWorldToLocal = Engine_Owner_SystemWorldToLocal;
	Context.MapSpawn.Engine.Owner.SystemLocalToWorldNoScale = Engine_Owner_SystemLocalToWorldNoScale;
	Context.MapSpawn.Engine.Owner.SystemWorldToLocalNoScale = Engine_Owner_SystemWorldToLocalNoScale;
	Context.MapUpdate.Engine.DeltaTime = Engine_DeltaTime;
	Context.MapUpdate.Engine.Owner.SystemLocalToWorld = Engine_Owner_SystemLocalToWorld;
	Context.MapUpdate.Engine.Owner.SystemWorldToLocal = Engine_Owner_SystemWorldToLocal;
	Context.MapUpdate.Engine.Owner.SystemLocalToWorldNoScale = Engine_Owner_SystemLocalToWorldNoScale;
	Context.MapUpdate.Engine.Owner.SystemWorldToLocalNoScale = Engine_Owner_SystemWorldToLocalNoScale;
	Context.MapUpdate.Engine.Emitter.InstanceSeed = Engine_Emitter_InstanceSeed;
	Context.MapUpdate.Engine.Time = Engine_Time;
	Context.MapUpdate.Engine.WorldDeltaTime = Engine_WorldDeltaTime;
	Context.MapUpdate.Engine.InverseDeltaTime = Engine_InverseDeltaTime;
	Context.MapUpdate.Engine.ExecutionCount = Engine_ExecutionCount;
	Context.MapUpdate.Emitter.SpawnRate = Emitter_SpawnRate;
	Context.MapUpdate.Emitter.SpawnInterval = Emitter_SpawnInterval;
	Context.MapUpdate.Emitter.InterpSpawnStartDt = Emitter_InterpSpawnStartDt;
	Context.MapUpdate.Emitter.SpawnGroup = Emitter_SpawnGroup;
	Context.MapUpdate.Engine.Emitter.TotalSpawnedParticles = Engine_Emitter_TotalSpawnedParticles;
	Context.MapUpdate.Emitter.RandomSeed = Emitter_RandomSeed;
	Context.MapUpdate.Engine.System.RandomSeed = Engine_System_RandomSeed;
	ReadDataSets(Context);
	InterpolateParameters(Context);
EnterStatScope(10 );
	SimulateMapSpawn(Context);
ExitStatScope();
	
	Context.MapUpdate.Particles = Context.MapSpawn.Particles;
		Context.MapUpdate.Particles.Previous.Velocity = Context.MapSpawn.Particles.Velocity;
		Context.MapUpdate.Particles.Previous.Position = Context.MapSpawn.Particles.Position;
	

EnterStatScope(11 );
	SimulateMapUpdate(Context);
ExitStatScope();
	WriteDataSets(Context);
	{
	bool bValid = Context.MapUpdate.DataInstance.Alive;
	int TmpWriteIndex = OutputIndex(0, true, bValid);
	OutputDataFloat(0, 0, TmpWriteIndex, Context.MapUpdate.Particles.Age);
	OutputDataFloat(0, 1, TmpWriteIndex, Context.MapUpdate.Particles.DistanceTraveled);
	OutputDataFloat(0, 2, TmpWriteIndex, Context.MapUpdate.Particles.Initial.SpriteSize.x);
	OutputDataFloat(0, 3, TmpWriteIndex, Context.MapUpdate.Particles.Initial.SpriteSize.y);
	OutputDataFloat(0, 4, TmpWriteIndex, Context.MapUpdate.Particles.Lifetime);
	OutputDataFloat(0, 5, TmpWriteIndex, Context.MapUpdate.Particles.Mass);
	OutputDataFloat(0, 6, TmpWriteIndex, Context.MapUpdate.Particles.MaterialRandom);
	OutputDataFloat(0, 7, TmpWriteIndex, Context.MapUpdate.Particles.NormalizedAge);
	OutputDataFloat(0, 8, TmpWriteIndex, Context.MapUpdate.Particles.Position.x);
	OutputDataFloat(0, 9, TmpWriteIndex, Context.MapUpdate.Particles.Position.y);
	OutputDataFloat(0, 10, TmpWriteIndex, Context.MapUpdate.Particles.Position.z);
	OutputDataFloat(0, 11, TmpWriteIndex, Context.MapUpdate.Particles.Presolve.PhysicsForce.x);
	OutputDataFloat(0, 12, TmpWriteIndex, Context.MapUpdate.Particles.Presolve.PhysicsForce.y);
	OutputDataFloat(0, 13, TmpWriteIndex, Context.MapUpdate.Particles.Presolve.PhysicsForce.z);
	OutputDataFloat(0, 14, TmpWriteIndex, Context.MapUpdate.Particles.Presolve.Position.x);
	OutputDataFloat(0, 15, TmpWriteIndex, Context.MapUpdate.Particles.Presolve.Position.y);
	OutputDataFloat(0, 16, TmpWriteIndex, Context.MapUpdate.Particles.Presolve.Position.z);
	OutputDataFloat(0, 17, TmpWriteIndex, Context.MapUpdate.Particles.Presolve.Velocity.x);
	OutputDataFloat(0, 18, TmpWriteIndex, Context.MapUpdate.Particles.Presolve.Velocity.y);
	OutputDataFloat(0, 19, TmpWriteIndex, Context.MapUpdate.Particles.Presolve.Velocity.z);
	OutputDataFloat(0, 20, TmpWriteIndex, Context.MapUpdate.Particles.Previous.Position.x);
	OutputDataFloat(0, 21, TmpWriteIndex, Context.MapUpdate.Particles.Previous.Position.y);
	OutputDataFloat(0, 22, TmpWriteIndex, Context.MapUpdate.Particles.Previous.Position.z);
	OutputDataFloat(0, 23, TmpWriteIndex, Context.MapUpdate.Particles.Previous.SpriteSize.x);
	OutputDataFloat(0, 24, TmpWriteIndex, Context.MapUpdate.Particles.Previous.SpriteSize.y);
	OutputDataFloat(0, 25, TmpWriteIndex, Context.MapUpdate.Particles.Previous.Velocity.x);
	OutputDataFloat(0, 26, TmpWriteIndex, Context.MapUpdate.Particles.Previous.Velocity.y);
	OutputDataFloat(0, 27, TmpWriteIndex, Context.MapUpdate.Particles.Previous.Velocity.z);
	OutputDataFloat(0, 28, TmpWriteIndex, Context.MapUpdate.Particles.RibbonUVDistance);
	OutputDataFloat(0, 29, TmpWriteIndex, Context.MapUpdate.Particles.RotationalInertia);
	OutputDataFloat(0, 30, TmpWriteIndex, Context.MapUpdate.Particles.RotationalVelocity.x);
	OutputDataFloat(0, 31, TmpWriteIndex, Context.MapUpdate.Particles.RotationalVelocity.y);
	OutputDataFloat(0, 32, TmpWriteIndex, Context.MapUpdate.Particles.RotationalVelocity.z);
	OutputDataFloat(0, 33, TmpWriteIndex, Context.MapUpdate.Particles.SpriteSize.x);
	OutputDataFloat(0, 34, TmpWriteIndex, Context.MapUpdate.Particles.SpriteSize.y);
	OutputDataInt(0, 0, TmpWriteIndex, Context.MapUpdate.Particles.UniqueID);
	OutputDataFloat(0, 35, TmpWriteIndex, Context.MapUpdate.Particles.Velocity.x);
	OutputDataFloat(0, 36, TmpWriteIndex, Context.MapUpdate.Particles.Velocity.y);
	OutputDataFloat(0, 37, TmpWriteIndex, Context.MapUpdate.Particles.Velocity.z);
	}
ExitStatScope();
}
#line 845 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"



#if 0 /*BEGIN_RESOURCE_TABLES*/
NULL, 0
NULL, NULL, 0, 0
#endif /*END_RESOURCE_TABLES*/
#if 0 /*DIRECT COMPILE*/
-directcompile -format=VVM_1 -entry=SimulateMain -shaderPlatformName=None -cs C:/Users/Usuario/OneDrive/Documentos/Unreal Projects/UnrealEffects/UnrealEffects/Saved/ShaderDebugInfo/VM/Game/Niagara/NS_Explosion/Sparks/ParticleSpawnScriptInterpolated/NiagaraEmitterInstanceShader.usf -cflags=2097152 -hlslccflags=1048578 -nocrashreports
#endif /*DIRECT COMPILE*/
